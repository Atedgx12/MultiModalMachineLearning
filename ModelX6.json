{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d8f9656-434b-47d4-89e5-50b79d09e669",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:Initializing layer with input size: 810000\n",
      "INFO:__main__:Initializing layer with input size: 810000\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'train_loader' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 208\u001b[0m\n\u001b[0;32m    205\u001b[0m model2\u001b[38;5;241m.\u001b[39minitialize_layer()\n\u001b[0;32m    207\u001b[0m \u001b[38;5;66;03m# Train the models\u001b[39;00m\n\u001b[1;32m--> 208\u001b[0m dual_model_training(model1, model2, \u001b[43mtrain_loader\u001b[49m, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m, lr\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1e-3\u001b[39m)\n\u001b[0;32m    209\u001b[0m \u001b[38;5;66;03m# Adaptive Reward Based Model\u001b[39;00m\n\u001b[0;32m    210\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mAdaptiveRewardBasedModel\u001b[39;00m(nn\u001b[38;5;241m.\u001b[39mModule):\n",
      "\u001b[1;31mNameError\u001b[0m: name 'train_loader' is not defined"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import json\n",
    "import logging\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch import nn, optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from dataclasses import dataclass\n",
    "\n",
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "# Data Class for Grid Pairs\n",
    "@dataclass\n",
    "class GridPair:\n",
    "    task_id: str\n",
    "    input_grid: list\n",
    "    output_grid: list\n",
    "\n",
    "# Load ARC Data\n",
    "def load_arc_data():\n",
    "    file_paths = {\n",
    "        \"arc-agi_training-challenges\": \"arc-agi_training_challenges.json\",\n",
    "        \"arc-agi_evaluation-challenges\": \"arc-agi_evaluation_challenges.json\"\n",
    "    }\n",
    "    arc_data = {}\n",
    "    for key, path in file_paths.items():\n",
    "        try:\n",
    "            with open(path, 'r') as f:\n",
    "                arc_data[key] = json.load(f)\n",
    "                logger.info(f\"Loaded {key} from {path}.\")\n",
    "        except (FileNotFoundError, json.JSONDecodeError) as e:\n",
    "            logger.error(f\"Error loading {path}: {e}\")\n",
    "            arc_data[key] = {}\n",
    "    return arc_data\n",
    "\n",
    "# Custom Collate Function for Dynamic Padding\n",
    "def collate_fn(batch):\n",
    "    \"\"\"Dynamically pad grids to match the largest grid size in the batch.\"\"\"\n",
    "    max_size = max(\n",
    "        max(len(pair[0]), len(pair[1]))\n",
    "        for pair in batch\n",
    "    )\n",
    "\n",
    "    padded_inputs, padded_outputs = [], []\n",
    "\n",
    "    for input_grid, output_grid in batch:\n",
    "        # Convert to tensors\n",
    "        input_tensor = torch.tensor(input_grid, dtype=torch.float32)\n",
    "        output_tensor = torch.tensor(output_grid, dtype=torch.float32)\n",
    "\n",
    "        # Pad input and output grids\n",
    "        padded_input = torch.full((max_size, max_size), -1, dtype=torch.float32)\n",
    "        padded_output = torch.full((max_size, max_size), -1, dtype=torch.float32)\n",
    "\n",
    "        padded_input[:input_tensor.size(0), :input_tensor.size(1)] = input_tensor\n",
    "        padded_output[:output_tensor.size(0), :output_tensor.size(1)] = output_tensor\n",
    "\n",
    "        padded_inputs.append(padded_input)\n",
    "        padded_outputs.append(padded_output)\n",
    "\n",
    "    return torch.stack(padded_inputs), torch.stack(padded_outputs)\n",
    "\n",
    "# PyTorch Dataset Class\n",
    "class AugmentedARCDataset(Dataset):\n",
    "    def __init__(self, grid_pairs, augment=True):\n",
    "        self.grid_pairs = grid_pairs\n",
    "        self.augment = augment\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.grid_pairs)\n",
    "\n",
    "    # In AugmentedARCDataset class\n",
    "    def __getitem__(self, idx):\n",
    "        pair = self.grid_pairs[idx]\n",
    "        input_grid = torch.tensor(pair.input_grid, dtype=torch.float32)\n",
    "        output_grid = torch.tensor(pair.output_grid, dtype=torch.float32)\n",
    "        \n",
    "        # Flatten the output grid if necessary\n",
    "        target = output_grid.flatten()  # Adjust this based on how you want to shape your targets\n",
    "    \n",
    "        return input_grid, target  # Ensure targets are in the correct shape\n",
    "def pad_and_flatten(inputs, target_size):\n",
    "    # Pad to the target size\n",
    "    padded = torch.full((inputs.size(0), target_size), -1, dtype=torch.float32)  # -1 or another value as padding\n",
    "    for i in range(inputs.size(0)):\n",
    "        padded[i, :inputs[i].numel()] = inputs[i].flatten()  # Flatten and fill the padded tensor\n",
    "    return padded\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import logging\n",
    "\n",
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "# Adaptive Reward-Based Model\n",
    "class AdaptiveRewardBasedModel(nn.Module):\n",
    "    def __init__(self, input_size, num_classes):\n",
    "        super().__init__()\n",
    "        self.dynamic_layer = nn.Linear(input_size, num_classes)\n",
    "        self.input_size = input_size  # Store the input size\n",
    "\n",
    "    def initialize_layer(self):\n",
    "        logger.info(f\"Initializing layer with input size: {self.input_size}\")\n",
    "        self.dynamic_layer = nn.Linear(self.input_size, 10)  # Adjust output size as needed\n",
    "\n",
    "    def forward(self, x):\n",
    "        if self.dynamic_layer is None:\n",
    "            raise ValueError(\"Dynamic layer has not been initialized.\")\n",
    "        logger.info(f\"Forward pass with input shape: {x.shape}\")\n",
    "        return self.dynamic_layer(x)\n",
    "        \n",
    "    def get_params(self):\n",
    "        return self.dynamic_layer.parameters()\n",
    "\n",
    "# Train the models\n",
    "def dual_model_training(model1, model2, train_loader, epochs, lr):\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer1 = optim.AdamW(model1.parameters(), lr=lr)\n",
    "    optimizer2 = optim.AdamW(model2.parameters(), lr=lr)\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        for inputs, targets in train_loader:\n",
    "            # Pad and flatten inputs\n",
    "            padded_inputs = pad_and_flatten(inputs, 810000)  # Match input size\n",
    "\n",
    "            # Flatten and convert targets to Long type\n",
    "            targets = targets.view(-1)  # Ensure targets are 1D\n",
    "            logger.info(f\"Flattened targets shape: {targets.shape}\")\n",
    "\n",
    "            # Check for any out-of-bounds indices in targets\n",
    "            if targets.dim() > 1:\n",
    "                targets = targets.view(-1)\n",
    "                logger.warning(f\"Reshaped targets to shape: {targets.shape}\")\n",
    "\n",
    "            # Replace out-of-bound values\n",
    "            invalid_indices = targets < 0\n",
    "            if invalid_indices.any():\n",
    "                logger.warning(\"Found invalid target indices. Setting them to 0.\")\n",
    "                targets[invalid_indices] = 0  # Map invalid targets to a valid class\n",
    "\n",
    "            # Ensure targets are of Long type\n",
    "            if targets.dtype != torch.long:\n",
    "                targets = targets.long()\n",
    "\n",
    "            optimizer1.zero_grad()\n",
    "            optimizer2.zero_grad()\n",
    "\n",
    "            # Forward pass for both models\n",
    "            outputs1 = model1(padded_inputs)\n",
    "            outputs2 = model2(padded_inputs)\n",
    "\n",
    "            # Log output shapes\n",
    "            logger.info(f\"Outputs1 shape: {outputs1.shape}, Targets shape: {targets.shape}\")\n",
    "\n",
    "            # Check if outputs and targets are compatible for loss computation\n",
    "            if outputs1.size(0) != targets.size(0):\n",
    "                # Handle size mismatch by truncating targets or repeating\n",
    "                if targets.size(0) < outputs1.size(0):\n",
    "                    targets = targets.repeat((outputs1.size(0) // targets.size(0) + 1))[:outputs1.size(0)]\n",
    "                    logger.warning(f\"Resized targets to shape: {targets.shape}\")\n",
    "                else:\n",
    "                    targets = targets[:outputs1.size(0)]\n",
    "                    logger.warning(f\"Truncated targets to shape: {targets.shape}\")\n",
    "\n",
    "            # Ensure outputs and targets are compatible for loss computation\n",
    "            if outputs1.size(0) != targets.size(0):\n",
    "                raise ValueError(f\"Output batch size {outputs1.size(0)} does not match target batch size {targets.size(0)}.\")\n",
    "\n",
    "            # Compute loss for model1\n",
    "            loss1 = criterion(outputs1, targets)\n",
    "            loss1.backward()  # Backpropagation for model1\n",
    "            optimizer1.step()  # Update model1 parameters\n",
    "\n",
    "            # Repeat the above checks and computations for model2\n",
    "            # Check for size compatibility again\n",
    "            if outputs2.size(0) != targets.size(0):\n",
    "                if targets.size(0) < outputs2.size(0):\n",
    "                    targets = targets.repeat((outputs2.size(0) // targets.size(0) + 1))[:outputs2.size(0)]\n",
    "                    logger.warning(f\"Resized targets for model2 to shape: {targets.shape}\")\n",
    "                else:\n",
    "                    targets = targets[:outputs2.size(0)]\n",
    "                    logger.warning(f\"Truncated targets for model2 to shape: {targets.shape}\")\n",
    "\n",
    "            # Compute loss for model2\n",
    "            loss2 = criterion(outputs2, targets)\n",
    "            loss2.backward()  # Backpropagation for model2\n",
    "            optimizer2.step()  # Update model2 parameters\n",
    "\n",
    "    logger.info(f\"Completed {epochs} epochs.\")\n",
    "\n",
    "\n",
    "# Main execution\n",
    "input_size = 810000  # Set the input size appropriately\n",
    "num_classes = 10  # Set this to your actual number of classes\n",
    "model1 = AdaptiveRewardBasedModel(input_size, num_classes)\n",
    "model2 = AdaptiveRewardBasedModel(input_size, num_classes)\n",
    "\n",
    "# Initialize the layers if necessary\n",
    "model1.initialize_layer()\n",
    "model2.initialize_layer()\n",
    "\n",
    "# Train the models\n",
    "dual_model_training(model1, model2, train_loader, epochs=10, lr=1e-3)\n",
    "# Adaptive Reward Based Model\n",
    "class AdaptiveRewardBasedModel(nn.Module):\n",
    "    def __init__(self, input_size, num_classes):\n",
    "        super(AdaptiveRewardBasedModel, self).__init__()\n",
    "        self.input_size = input_size\n",
    "        self.num_classes = num_classes\n",
    "        self.dynamic_layer = nn.Linear(input_size, num_classes)\n",
    "        self.flatten = nn.Flatten()\n",
    "\n",
    "    def forward(self, x):\n",
    "        logger.info(f\"Forward pass with input shape: {x.shape}\")\n",
    "        x = self.flatten(x)\n",
    "        return self.dynamic_layer(x)\n",
    "\n",
    "def dual_model_training(model1, model2, train_loader, epochs, lr):\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer1 = optim.AdamW(model1.parameters(), lr=lr)\n",
    "    optimizer2 = optim.AdamW(model2.parameters(), lr=lr)\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        logger.info(f\"Starting epoch {epoch + 1}/{epochs}\")\n",
    "        for inputs, targets in train_loader:\n",
    "            logger.info(f\"Input shape: {inputs.shape}, Targets shape: {targets.shape}\")\n",
    "\n",
    "            # Check and adjust input shape\n",
    "            if inputs.size(1) != model1.input_size:\n",
    "                logger.warning(f\"Resizing input from {inputs.shape} to match expected size {model1.input_size}.\")\n",
    "                inputs = inputs.view(inputs.size(0), -1)  # Flatten to a single dimension\n",
    "\n",
    "            # Handle targets\n",
    "            targets = targets.view(-1).long()  # Flatten targets to a 1D array and convert to long\n",
    "\n",
    "            # Check for invalid target indices\n",
    "            if (targets < 0).any() or (targets >= model1.num_classes).any():\n",
    "                logger.warning(f\"Found invalid target indices. Adjusting them.\")\n",
    "                targets = targets.clamp(0, model1.num_classes - 1)\n",
    "\n",
    "            # Forward pass for both models\n",
    "            outputs1 = model1(inputs)\n",
    "            outputs2 = model2(inputs)\n",
    "\n",
    "            logger.info(f\"Outputs1 shape: {outputs1.shape}, Targets shape: {targets.shape}\")\n",
    "\n",
    "            # Ensure outputs and targets are compatible for loss computation\n",
    "            if outputs1.size(0) != targets.size(0):\n",
    "                logger.warning(f\"Adjusting targets size from {targets.shape} to {outputs1.size(0)}\")\n",
    "                targets = targets[:outputs1.size(0)]  # Adjust targets size\n",
    "\n",
    "            # Compute loss for model1\n",
    "            loss1 = criterion(outputs1, targets)\n",
    "            loss1.backward()  # Backpropagation for model1\n",
    "            optimizer1.step()  # Update model1 parameters\n",
    "\n",
    "            # Repeat for model2\n",
    "            optimizer2.zero_grad()\n",
    "            if outputs2.size(0) != targets.size(0):\n",
    "                logger.warning(f\"Adjusting targets size from {targets.shape} to {outputs2.size(0)}\")\n",
    "                targets = targets[:outputs2.size(0)]  # Adjust targets size\n",
    "            loss2 = criterion(outputs2, targets)\n",
    "            loss2.backward()  # Backpropagation for model2\n",
    "            optimizer2.step()  # Update model2 parameters\n",
    "\n",
    "        logger.info(f\"Completed epoch {epoch + 1}/{epochs}\")\n",
    "\n",
    "# Example instantiation and training call\n",
    "input_size = 810000  # Set according to your requirements\n",
    "num_classes = 10  # Adjust based on your dataset\n",
    "\n",
    "# Assuming train_loader is defined and populated correctly\n",
    "model1 = AdaptiveRewardBasedModel(input_size, num_classes)\n",
    "model2 = AdaptiveRewardBasedModel(input_size, num_classes)\n",
    "\n",
    "# Start training\n",
    "dual_model_training(model1, model2, train_loader, epochs=10, lr=1e-3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a34afd7b-8e4d-4fc3-9474-f90966d74ddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import json\n",
    "import logging\n",
    "import numpy as np\n",
    "import torch\n",
    "import random\n",
    "from torch import nn, optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torch.cuda.amp import autocast, GradScaler\n",
    "from dataclasses import dataclass\n",
    "\n",
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "# Data Class for Grid Pairs\n",
    "@dataclass\n",
    "class GridPair:\n",
    "    task_id: str\n",
    "    input_grid: list\n",
    "    output_grid: list\n",
    "\n",
    "# Load ARC Data\n",
    "def load_arc_data():\n",
    "    file_paths = {\n",
    "        \"arc-agi_training-challenges\": \"arc-agi_training_challenges.json\",\n",
    "        \"arc-agi_evaluation-challenges\": \"arc-agi_evaluation_challenges.json\"\n",
    "    }\n",
    "    arc_data = {}\n",
    "    for key, path in file_paths.items():\n",
    "        try:\n",
    "            with open(path, 'r') as f:\n",
    "                arc_data[key] = json.load(f)\n",
    "                logger.info(f\"Loaded {key} from {path}.\")\n",
    "        except (FileNotFoundError, json.JSONDecodeError) as e:\n",
    "            logger.error(f\"Error loading {path}: {e}\")\n",
    "            arc_data[key] = {}\n",
    "    return arc_data\n",
    "\n",
    "# Flatten and Reshape Grid Data\n",
    "def flatten_and_reshape(task_data):\n",
    "    flattened_pairs = []\n",
    "    for task_id, task_content in task_data.items():\n",
    "        logger.info(f\"Parsing task {task_id}...\")\n",
    "        train_pairs = task_content.get('train', [])\n",
    "        for pair in train_pairs:\n",
    "            input_grid = extract_and_reshape_grid(pair.get(\"input\"))\n",
    "            output_grid = extract_and_reshape_grid(pair.get(\"output\"))\n",
    "            if input_grid and output_grid:\n",
    "                flattened_pairs.append(GridPair(task_id, input_grid, output_grid))\n",
    "    return flattened_pairs\n",
    "\n",
    "# Extract and Reshape Grid\n",
    "def extract_and_reshape_grid(grid):\n",
    "    try:\n",
    "        flat_list = [item for sublist in grid for item in sublist] if isinstance(grid, list) else [grid]\n",
    "        return reshape_to_square_grid(flat_list)\n",
    "    except Exception as e:\n",
    "        logger.error(f\"Error processing grid: {e}\")\n",
    "        return None\n",
    "\n",
    "# Reshape to Square Grid\n",
    "def reshape_to_square_grid(flat_list):\n",
    "    size = math.ceil(math.sqrt(len(flat_list)))\n",
    "    padded_list = np.pad(flat_list, (0, size * size - len(flat_list)), constant_values=-1)\n",
    "    return padded_list.reshape(size, size).tolist()\n",
    "\n",
    "# Data Augmentation Functions\n",
    "def augment_grid(grid, noise_prob=0.2, dead_square_prob=0.1):\n",
    "    \"\"\"Applies augmentation to the grid by adding noise and dead squares.\"\"\"\n",
    "    augmented_grid = np.array(grid).copy()\n",
    "\n",
    "    for i in range(augmented_grid.shape[0]):\n",
    "        for j in range(augmented_grid.shape[1]):\n",
    "            if random.random() < noise_prob:\n",
    "                augmented_grid[i, j] = random.randint(0, 10)  # Add noise\n",
    "            if random.random() < dead_square_prob:\n",
    "                augmented_grid[i, j] = -1  # Dead square\n",
    "    return augmented_grid.tolist()\n",
    "\n",
    "def rotate_grid(grid):\n",
    "    \"\"\"Randomly rotates the grid.\"\"\"\n",
    "    rotations = random.choice([0, 1, 2, 3])\n",
    "    return np.rot90(grid, rotations).tolist()\n",
    "\n",
    "def flip_grid(grid):\n",
    "    \"\"\"Randomly flips the grid.\"\"\"\n",
    "    if random.random() > 0.5:\n",
    "        return np.flipud(grid).tolist()  # Vertical flip\n",
    "    else:\n",
    "        return np.fliplr(grid).tolist()  # Horizontal flip\n",
    "\n",
    "# Custom Collate Function for Dynamic Padding\n",
    "def collate_fn(batch):\n",
    "    \"\"\"Dynamically pad grids to match the largest grid size in the batch.\"\"\"\n",
    "    # Convert all grids to tensors and find the largest grid size\n",
    "    batch = [(torch.tensor(x[0], dtype=torch.float32), \n",
    "              torch.tensor(x[1], dtype=torch.float32)) for x in batch]\n",
    "\n",
    "    max_size = max(max(grid.shape[0], grid.shape[1]) for pair in batch for grid in pair)\n",
    "\n",
    "    padded_inputs, padded_outputs = [], []\n",
    "\n",
    "    # Pad each input and output grid to the max size\n",
    "    for input_grid, output_grid in batch:\n",
    "        input_padded = torch.full((max_size, max_size), -1, dtype=torch.float32)\n",
    "        output_padded = torch.full((max_size, max_size), -1, dtype=torch.float32)\n",
    "\n",
    "        # Copy the original grids into the padded tensors\n",
    "        input_padded[:input_grid.shape[0], :input_grid.shape[1]] = input_grid\n",
    "        output_padded[:output_grid.shape[0], :output_grid.shape[1]] = output_grid\n",
    "\n",
    "        padded_inputs.append(input_padded)\n",
    "        padded_outputs.append(output_padded)\n",
    "\n",
    "    # Stack the padded grids into a batch tensor\n",
    "    return torch.stack(padded_inputs), torch.stack(padded_outputs)\n",
    "\n",
    "# PyTorch Dataset Class\n",
    "class AugmentedARCDataset(Dataset):\n",
    "    def __init__(self, grid_pairs, augment=True):\n",
    "        self.grid_pairs = grid_pairs\n",
    "        self.augment = augment\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.grid_pairs)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        pair = self.grid_pairs[idx]\n",
    "        input_grid = torch.tensor(pair.input_grid, dtype=torch.float32)\n",
    "        output_grid = torch.tensor(pair.output_grid, dtype=torch.float32)\n",
    "\n",
    "        if self.augment:\n",
    "            input_grid = augment_grid(input_grid)\n",
    "            input_grid = rotate_grid(input_grid)\n",
    "            input_grid = flip_grid(input_grid)\n",
    "\n",
    "        return input_grid, output_grid\n",
    "\n",
    "class RewardBasedModel(nn.Module):\n",
    "    def __init__(self, input_size, output_size=10):\n",
    "        super().__init__()\n",
    "        self.flatten = nn.Flatten()\n",
    "        self.linear = nn.Linear(input_size, output_size)  # Input size matches flattened grid size\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.flatten(x)  # Flatten the input dynamically\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "    def earn_points(self, correct_predictions):\n",
    "        \"\"\"Earn points for correct predictions.\"\"\"\n",
    "        self.bank += correct_predictions\n",
    "\n",
    "    def spend_points(self, points):\n",
    "        \"\"\"Spend points from the bank.\"\"\"\n",
    "        if points > self.bank:\n",
    "            raise ValueError(\"Not enough points!\")\n",
    "        self.bank -= points\n",
    "\n",
    "    def select_variable_squares(self):\n",
    "        \"\"\"Select random variable squares for perturbation.\"\"\"\n",
    "        num_squares = random.randint(1, self.grid_size // 2)\n",
    "        return random.sample([(i, j) for i in range(self.grid_size) for j in range(self.grid_size)], num_squares)\n",
    "\n",
    "# Loss Function with Variable Squares\n",
    "def loss_with_variable_squares(predictions, targets, variable_squares, criterion):\n",
    "    mask = torch.ones_like(predictions, dtype=torch.bool)\n",
    "    for (i, j) in variable_squares:\n",
    "        mask[:, i, j] = False\n",
    "    return criterion(predictions[mask], targets[mask])\n",
    "\n",
    "def dual_model_training(model1, model2, train_loader, epochs, lr):\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer1 = optim.AdamW(model1.parameters(), lr=lr)\n",
    "    optimizer2 = optim.AdamW(model2.parameters(), lr=lr)\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        for inputs, targets in train_loader:\n",
    "            # Pad and flatten inputs\n",
    "            padded_inputs = pad_and_flatten(inputs, 810000)  # Match input size\n",
    "\n",
    "            # Flatten and convert targets to Long type\n",
    "            targets = targets.view(-1)  # Ensure targets are 1D\n",
    "            logger.info(f\"Flattened targets shape: {targets.shape}\")\n",
    "\n",
    "            # Check for any out-of-bounds indices in targets\n",
    "            if targets.dim() > 1:\n",
    "                targets = targets.view(-1)\n",
    "                logger.warning(f\"Reshaped targets to shape: {targets.shape}\")\n",
    "\n",
    "            # Replace out-of-bound values\n",
    "            invalid_indices = targets < 0\n",
    "            if invalid_indices.any():\n",
    "                logger.warning(\"Found invalid target indices. Setting them to 0.\")\n",
    "                targets[invalid_indices] = 0  # Map invalid targets to a valid class\n",
    "\n",
    "            # Ensure targets are of Long type\n",
    "            if targets.dtype != torch.long:\n",
    "                targets = targets.long()\n",
    "\n",
    "            optimizer1.zero_grad()\n",
    "            optimizer2.zero_grad()\n",
    "\n",
    "            # Forward pass for both models\n",
    "            outputs1 = model1(padded_inputs)\n",
    "            outputs2 = model2(padded_inputs)\n",
    "\n",
    "            # Log output shapes\n",
    "            logger.info(f\"Outputs1 shape: {outputs1.shape}, Targets shape: {targets.shape}\")\n",
    "\n",
    "            # Check if outputs and targets are compatible for loss computation\n",
    "            if outputs1.size(0) != targets.size(0):\n",
    "                # Handle size mismatch by truncating targets or repeating\n",
    "                if targets.size(0) < outputs1.size(0):\n",
    "                    targets = targets.repeat((outputs1.size(0) // targets.size(0) + 1))[:outputs1.size(0)]\n",
    "                    logger.warning(f\"Resized targets to shape: {targets.shape}\")\n",
    "                else:\n",
    "                    targets = targets[:outputs1.size(0)]\n",
    "                    logger.warning(f\"Truncated targets to shape: {targets.shape}\")\n",
    "\n",
    "            # Ensure outputs and targets are compatible for loss computation\n",
    "            if outputs1.size(0) != targets.size(0):\n",
    "                raise ValueError(f\"Output batch size {outputs1.size(0)} does not match target batch size {targets.size(0)}.\")\n",
    "\n",
    "            # Compute loss for model1\n",
    "            loss1 = criterion(outputs1, targets)\n",
    "            loss1.backward()  # Backpropagation for model1\n",
    "            optimizer1.step()  # Update model1 parameters\n",
    "\n",
    "            # Repeat the above checks and computations for model2\n",
    "            # Check for size compatibility again\n",
    "            if outputs2.size(0) != targets.size(0):\n",
    "                if targets.size(0) < outputs2.size(0):\n",
    "                    targets = targets.repeat((outputs2.size(0) // targets.size(0) + 1))[:outputs2.size(0)]\n",
    "                    logger.warning(f\"Resized targets for model2 to shape: {targets.shape}\")\n",
    "                else:\n",
    "                    targets = targets[:outputs2.size(0)]\n",
    "                    logger.warning(f\"Truncated targets for model2 to shape: {targets.shape}\")\n",
    "\n",
    "            # Compute loss for model2\n",
    "            loss2 = criterion(outputs2, targets)\n",
    "            loss2.backward()  # Backpropagation for model2\n",
    "            optimizer2.step()  # Update model2 parameters\n",
    "\n",
    "    logger.info(f\"Completed {epochs} epochs.\")\n",
    "\n",
    "# Main Workflow\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "arc_data = load_arc_data()\n",
    "train_grid_pairs = flatten_and_reshape(arc_data[\"arc-agi_training-challenges\"])\n",
    "\n",
    "train_loader = DataLoader(\n",
    "    AugmentedARCDataset(train_grid_pairs, augment=True), \n",
    "    batch_size=32, \n",
    "    shuffle=True, \n",
    "    collate_fn=collate_fn\n",
    ")\n",
    "\n",
    "base_model = nn.Sequential(nn.Flatten(), nn.Linear(9, 10))\n",
    "# Assuming your grids are padded to 29x29\n",
    "grid_size = 29  # Adjust based on your actual input size\n",
    "\n",
    "# Initialize the models with the appropriate grid size\n",
    "model1 = RewardBasedModel(input_size=input_size, output_size=10).to(device)\n",
    "model2 = RewardBasedModel(input_size=input_size, output_size=10).to(device)\n",
    "\n",
    "\n",
    "dual_model_training(model1, model2, train_loader, epochs=10, lr=1e-3)\n",
    "# Initialize models with the correct input size\n",
    "model1 = RewardBasedModel(input_size=input_size, output_size=10).to(device)\n",
    "model2 = RewardBasedModel(input_size=input_size, output_size=10).to(device)\n",
    "\n",
    "# Train the models using dual training\n",
    "dual_model_training(model1, model2, train_loader, epochs=10, lr=1e-)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c36d6115-d28c-468c-b7ff-65fd97ef5fc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/cnn_grid_mapper.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class CNNGridMapper(nn.Module):\n",
    "    def __init__(self, num_classes=11):\n",
    "        \"\"\"\n",
    "        Initializes the CNN model.\n",
    "\n",
    "        Args:\n",
    "            num_classes (int, optional): Number of classes per grid cell. Defaults to 11.\n",
    "        \"\"\"\n",
    "        super(CNNGridMapper, self).__init__()\n",
    "        self.encoder = nn.Sequential(\n",
    "            nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1),  # Input channels=1\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2),  # 10x10 -> 5x5\n",
    "            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2)  # 5x5 -> 2x2\n",
    "        )\n",
    "        \n",
    "        self.decoder = nn.Sequential(\n",
    "            nn.ConvTranspose2d(32, 16, kernel_size=2, stride=2),  # 2x2 -> 4x4\n",
    "            nn.ReLU(),\n",
    "            nn.ConvTranspose2d(16, num_classes, kernel_size=3, stride=1, padding=1),  # 4x4 -> 4x4\n",
    "            # Optionally, add another upsampling layer to reach 9x9\n",
    "            nn.Upsample(size=(9, 9), mode='bilinear', align_corners=True)\n",
    "        )\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # Reshape input to (batch_size, 1, 10, 10)\n",
    "        x = x.view(-1, 1, 10, 10)\n",
    "        x = self.encoder(x)\n",
    "        x = self.decoder(x)\n",
    "        # Flatten output to (batch_size, 81)\n",
    "        x = x.view(-1, 81)\n",
    "        return x\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2a95bbfb-f252-48fa-9ce4-b2653a49887d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import logging\n",
    "\n",
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "99668d4a-e3e7-4d71-9f8b-d97f2d64f08b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_grid_pairs(challenges, solutions):\n",
    "    \"\"\"\n",
    "    Extracts pairs of input and output grids from two datasets: challenges and solutions.\n",
    "\n",
    "    Args:\n",
    "        challenges (list of dict): A list of dictionaries containing input grids.\n",
    "        solutions (list of dict): A list of dictionaries containing output grids.\n",
    "\n",
    "    Returns:\n",
    "        list of tuple: A list of (input_grid, output_grid) pairs.\n",
    "    \"\"\"\n",
    "    if len(challenges) != len(solutions):\n",
    "        raise ValueError(\"The number of challenges and solutions must be equal.\")\n",
    "\n",
    "    grid_pairs = []\n",
    "\n",
    "    for challenge, solution in zip(challenges, solutions):\n",
    "        try:\n",
    "            # Ensure each dictionary contains 'input' and 'output' keys\n",
    "            input_grid = challenge.get('input')\n",
    "            output_grid = solution.get('output')\n",
    "\n",
    "            if input_grid is not None and output_grid is not None:\n",
    "                grid_pairs.append((input_grid, output_grid))\n",
    "            else:\n",
    "                print(f\"Invalid grid pair: {challenge}, {solution}\")\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"Error extracting grid pair: {e}\")\n",
    "\n",
    "    return grid_pairs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7732657-814b-492c-ae7a-75302ac07167",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_arc_model(model_type='mlp', num_epochs=50, learning_rate=0.001, device='cpu'):\n",
    "    \"\"\"\n",
    "    Trains the specified model type on the ARC dataset.\n",
    "\n",
    "    Args:\n",
    "        model_type (str, optional): Type of model ('mlp' or 'cnn'). Defaults to 'mlp'.\n",
    "        num_epochs (int, optional): Number of training epochs. Defaults to 50.\n",
    "        learning_rate (float, optional): Learning rate for the optimizer. Defaults to 0.001.\n",
    "        device (str, optional): Device to train on ('cpu' or 'cuda'). Defaults to 'cpu'.\n",
    "\n",
    "    Returns:\n",
    "        nn.Module: Trained model.\n",
    "    \"\"\"\n",
    "    # Load data\n",
    "    arc_data = load_arc_data()\n",
    "    unique_id = \"007bbfb7\"  # Replace with your actual unique ID if different\n",
    "\n",
    "    train_challenges = arc_data.get(\"arc-agi_training-challenges\", [])\n",
    "    train_solutions = arc_data.get(\"arc-agi_training-solutions\", [])\n",
    "    eval_challenges = arc_data.get(\"arc-agi_evaluation-challenges\", [])\n",
    "    eval_solutions = arc_data.get(\"arc-agi_evaluation-solutions\", [])\n",
    "\n",
    "    logger.info(f\"Number of training challenges: {len(train_challenges)}\")\n",
    "    logger.info(f\"Number of training solutions: {len(train_solutions)}\")\n",
    "    logger.info(f\"Number of evaluation challenges: {len(eval_challenges)}\")\n",
    "    logger.info(f\"Number of evaluation solutions: {len(eval_solutions)}\")\n",
    "\n",
    "    # Extract grid pairs\n",
    "    train_grid_pairs = extract_grid_pairs(train_challenges, train_solutions)\n",
    "    eval_grid_pairs = extract_grid_pairs(eval_challenges, eval_solutions)\n",
    "    logger.info(f\"Number of training grid pairs: {len(train_grid_pairs)}\")\n",
    "    logger.info(f\"Number of evaluation grid pairs: {len(eval_grid_pairs)}\")\n",
    "\n",
    "    # Create DataLoaders\n",
    "    batch_size = 32\n",
    "    train_loader, test_loader = create_data_loaders(\n",
    "        train_grid_pairs,\n",
    "        eval_grid_pairs,\n",
    "        batch_size=batch_size,\n",
    "        flatten=True,\n",
    "        max_size=10,\n",
    "        padding_value=-1\n",
    "    )\n",
    "\n",
    "    logger.info(f\"Training DataLoader size: {len(train_loader)} batches\")\n",
    "    logger.info(f\"Testing DataLoader size: {len(test_loader)} batches\")\n",
    "\n",
    "    # Initialize the model\n",
    "    if model_type.lower() == 'mlp':\n",
    "        input_size = 10 * 10  # 100\n",
    "        output_size = 9 * 9  # 81\n",
    "        model = MLPGridMapper(input_size=input_size, hidden_sizes=[256, 128], output_size=output_size)\n",
    "    elif model_type.lower() == 'cnn':\n",
    "        model = CNNGridMapper(num_classes=11)  # Adjust num_classes as per your dataset\n",
    "    else:\n",
    "        logger.error(\"Invalid model type specified. Choose 'mlp' or 'cnn'.\")\n",
    "        return None\n",
    "\n",
    "    # Define the loss function and optimizer\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
    "\n",
    "    # Train the model\n",
    "    model.to(device)\n",
    "    logger.info(f\"Starting training on {device}...\")\n",
    "    for epoch in range(1, num_epochs + 1):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "        correct = 0\n",
    "        total = 0\n",
    "\n",
    "        for batch in train_loader:\n",
    "            inputs = batch['input_grid'].to(device)\n",
    "            targets = batch['output_grid'].to(device)\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(inputs)\n",
    "\n",
    "            loss = criterion(outputs, targets)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            running_loss += loss.item() * inputs.size(0)\n",
    "\n",
    "            # Calculate accuracy\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            _, actual = torch.max(targets, 1)\n",
    "            total += targets.size(0)\n",
    "            correct += (predicted == actual).sum().item()\n",
    "\n",
    "        epoch_loss = running_loss / len(train_loader.dataset)\n",
    "        epoch_acc = correct / total\n",
    "\n",
    "        # Validation\n",
    "        model.eval()\n",
    "        val_loss = 0.0\n",
    "        val_correct = 0\n",
    "        val_total = 0\n",
    "\n",
    "        with torch.no_grad():\n",
    "            for batch in test_loader:\n",
    "                inputs = batch['input_grid'].to(device)\n",
    "                targets = batch['output_grid'].to(device)\n",
    "\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, targets)\n",
    "                val_loss += loss.item() * inputs.size(0)\n",
    "\n",
    "                _, predicted = torch.max(outputs, 1)\n",
    "                _, actual = torch.max(targets, 1)\n",
    "                val_total += targets.size(0)\n",
    "                val_correct += (predicted == actual).sum().item()\n",
    "\n",
    "        avg_val_loss = val_loss / len(test_loader.dataset)\n",
    "        val_acc = val_correct / val_total\n",
    "\n",
    "        logger.info(f\"Epoch {epoch}/{num_epochs} - \"\n",
    "                    f\"Train Loss: {epoch_loss:.4f}, Train Acc: {epoch_acc:.4f} - \"\n",
    "                    f\"Val Loss: {avg_val_loss:.4f}, Val Acc: {val_acc:.4f}\")\n",
    "\n",
    "    logger.info(\"Training complete.\")\n",
    "\n",
    "    # Save the trained model\n",
    "    model_filename = f\"{model_type}_grid_mapper.pth\"\n",
    "    torch.save(model.state_dict(), model_filename)\n",
    "    logger.info(f\"Model saved to {model_filename}\")\n",
    "\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3cb9b1b2-7326-4cb2-931a-ccb50bb1c736",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "class MLPGridMapper(nn.Module):\n",
    "    \"\"\"\n",
    "    A Multi-Layer Perceptron (MLP) model to map input grids to output grids.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, input_size=100, hidden_sizes=[256, 128], output_size=81):\n",
    "        super(MLPGridMapper, self).__init__()\n",
    "        self.fc1 = nn.Linear(input_size, hidden_sizes[0])\n",
    "        self.fc2 = nn.Linear(hidden_sizes[0], hidden_sizes[1])\n",
    "        self.fc3 = nn.Linear(hidden_sizes[1], output_size)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        return self.fc3(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b7bfa07a-5e7c-425b-ade6-33eb56f98b94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10, Loss: 1.0346\n",
      "Epoch 2/10, Loss: 1.0190\n",
      "Epoch 3/10, Loss: 1.0055\n",
      "Epoch 4/10, Loss: 0.9929\n",
      "Epoch 5/10, Loss: 0.9807\n",
      "Epoch 6/10, Loss: 0.9684\n",
      "Epoch 7/10, Loss: 0.9561\n",
      "Epoch 8/10, Loss: 0.9435\n",
      "Epoch 9/10, Loss: 0.9309\n",
      "Epoch 10/10, Loss: 0.9181\n"
     ]
    }
   ],
   "source": [
    "# Initialize the model, loss function, and optimizer\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "model = MLPGridMapper(input_size=100, hidden_sizes=[256, 128], output_size=81).to(device)\n",
    "criterion = nn.MSELoss()  # Example loss function\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# Example data (random) - replace with actual grid data\n",
    "X_train = torch.randn(100, 100).to(device)  # 100 samples, each with 100 features\n",
    "y_train = torch.randn(100, 81).to(device)   # 100 samples, each with 81 outputs\n",
    "\n",
    "# Training loop\n",
    "epochs = 10\n",
    "for epoch in range(epochs):\n",
    "    model.train()\n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    output = model(X_train)\n",
    "    loss = criterion(output, y_train)\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    \n",
    "    print(f\"Epoch {epoch + 1}/{epochs}, Loss: {loss.item():.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a59ba9aa-0711-4370-b566-4a8163d0e43b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model's state dictionary\n",
    "torch.save(model.state_dict(), 'mlp_grid_mapper.pth')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "736cf9b7-61c4-40ff-bb4c-71d9c8b6ecb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded successfully.\n"
     ]
    }
   ],
   "source": [
    "# Initialize the model again\n",
    "model = MLPGridMapper(input_size=100, hidden_sizes=[256, 128], output_size=81).to(device)\n",
    "\n",
    "# Load the model with weights_only=True\n",
    "model.load_state_dict(\n",
    "    torch.load('mlp_grid_mapper.pth', map_location=device, weights_only=True)\n",
    ")\n",
    "\n",
    "print(\"Model loaded successfully.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d2060ed4-4421-4e2e-b9ef-50da74c75e45",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "\n",
    "# Example test data (random data)\n",
    "X_test = torch.randn(20, 100)  # 20 samples, each with 100 features\n",
    "y_test = torch.randint(0, 81, (20, 81))  # 20 samples, each with 81 possible outputs\n",
    "\n",
    "# Create a TensorDataset and DataLoader for the test data\n",
    "test_dataset = TensorDataset(X_test, y_test)\n",
    "test_loader = DataLoader(test_dataset, batch_size=4, shuffle=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "440c8e11-973e-4e4c-8deb-b7d0d1192485",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_model(model, test_loader, device='cpu'):\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    model.to(device)\n",
    "    model.eval()\n",
    "\n",
    "    total_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, targets in test_loader:\n",
    "            inputs = inputs.to(device)\n",
    "\n",
    "            # Convert targets to class indices if they are one-hot encoded\n",
    "            if targets.dtype != torch.long:\n",
    "                targets = torch.argmax(targets, dim=1)\n",
    "\n",
    "            targets = targets.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, targets)\n",
    "            total_loss += loss.item() * inputs.size(0)\n",
    "\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total += targets.size(0)\n",
    "            correct += (predicted == targets).sum().item()\n",
    "\n",
    "    avg_loss = total_loss / len(test_loader.dataset)\n",
    "    accuracy = correct / total\n",
    "\n",
    "    print(f\"Test Loss: {avg_loss:.4f}, Test Accuracy: {accuracy:.4f}\")\n",
    "    return avg_loss, accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3fc15810-5cbb-4ee4-9d58-7fc232f93750",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA88AAAHqCAYAAAA6dXxvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA8t0lEQVR4nO3debhVZd0//vdhPnBABgHBAVScNU1KcyZTTNQUJxSL0CgexSFN9MmycB7SbygOWVEO6aMi6pOlKZqmZqGmWDmPiJqIjDLKsH9/8Dv78XiAdTaBB+31uq59Xeesda+1PmsfLvZ673vd96oqlUqlAAAAAMvVpLELAAAAgDWd8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUEB4BgAAgALCMwAAABQQngEAAKCA8AxrgBEjRqSqqqpBbauqqjJixIgGtX388cfTokWLTJw48d+obs12xBFH5PDDD2/sMgBYCT179szgwYMbu4w1zsffl4ceeihVVVV56KGHVtkxKrmeAJYSnmkU1157baqqqvLkk082dilJkrlz52bEiBEVfyi99957+e///u9ss802qampSatWrdKrV68cffTRefTRR1dPsRX4wQ9+kCOPPDI9evQoL3v88cdz3HHHpXfv3mnevHlhaB89enS22GKLtGrVKptssklGjRq10vWsjmOffvrpGTt2bJ555pmVrguAVevVV1/N0KFDs9FGG6VVq1Zp165ddtlll1x22WWZN29eY5e3QrXXKLWvVq1aZdNNN83xxx+fyZMnN3Z5Fbn77rsFZFiFhGfI0vB81llnVRSeH3/88Wy11VYZOXJkevfunYsuuihXXHFFBgwYkMcffzy77bZbHn744Qbt64c//OEqv5iYMGFC7r///vzXf/1XneV33313fvnLX6aqqiobbbTRCvdxzTXXZMiQIdlqq60yatSo7LTTTjnxxBNz0UUXrVRNq+PYn//85/OFL3whl1566UrVBMCq9fvf/z7bbLNNbr311hxwwAEZNWpULrjggmywwQYZPnx4TjrppMYusUHOPvvs3HDDDbniiiuy88475+qrr85OO+2UuXPnfuK17L777pk3b1523333ira7++67c9ZZZy1z3bx58/LDH/5wVZQH/zlK0Ah+/etfl5KUnnjiicYupVQqlUpTpkwpJSn9+Mc/blD7adOmlbp161ZaZ511Ss8//3y99UuWLCnddNNNpccff3yF+5k9e3bFtTa0zhNPPLG0wQYblJYsWVJn+bvvvluaO3duqVQqlYYNG1Za3n8Dc+fOLXXq1Km033771Vl+1FFHldq0aVOaNm1axbWvrmNfcsklpTZt2pQ++OCDimsCYNV57bXXSjU1NaXNN9+89M4779Rb//LLL5dGjhxZ/r1Hjx6lb37zm59ghcWWd41yyimnlJKUbrrppuVuuzKf68uyqt6XFX3WApXT88waY/Dgwampqcnbb7+dgw46KDU1NencuXNOPfXULF68uNzujTfeSFVVVS655JL89Kc/TY8ePVJdXZ099tgj//znP+vss0+fPunTp88yj9WzZ8/y/jp37pwkOeuss8q3aa3oNqef/exn+de//pWRI0dm8803r7e+qqoqRx55ZL74xS+Wl9WOa37uuecycODAdOjQIbvuumuddR+1YMGCnHzyyencuXPatm2br33ta3nrrbdW+B5+1J133pk999yz3n67du2a6urqwu0ffPDBTJ06Nccdd1yd5cOGDcucOXPy+9//Pkny/PPPp7q6OoMGDarT7tFHH03Tpk1z+umnr7Zj19p7770zZ86cjBs3rnDfAKw+F198cWbPnp3Ro0enW7du9db36tVrhT3P06ZNy6mnnloeDtWuXbvsu+++yxyaM2rUqGy11VZp3bp1OnTokC984Qu56aabyus/+OCDfPe7303Pnj3TsmXLdOnSJXvvvXeeeuqplTq3PffcM0ny+uuvJ/m/65ZXX301/fr1S9u2bXPUUUclSZYsWZKRI0dmq622SqtWrdK1a9cMHTo006dPr7PPUqmUc889N+utt15at26dL3/5y3n22WfrHXt5Y57Hjx+ffv36pUOHDmnTpk0+97nP5bLLLivXd+WVVyZJndvQay3rWufpp5/Ovvvum3bt2qWmpiZf+cpX8te//rVOm9rb2v/85z/nlFNOSefOndOmTZv0798/U6ZMqfBdhU+XZo1dAHzU4sWLs88++2THHXfMJZdckvvvvz+XXnppNt544xx77LF12l5//fX54IMPMmzYsMyfPz+XXXZZ9txzz/zjH/9I165dG3zMzp075+qrr86xxx6b/v375+CDD06SfO5zn1vuNnfddVeqq6vLbStx2GGHZZNNNsn555+fUqm03HZDhgzJb37zmwwcODA777xz/vjHP2a//fZr0DHefvvtvPnmm9l+++0rrq/W008/nST5whe+UGd5796906RJkzz99NP5+te/ni222CLnnHNOhg8fnkMPPTRf+9rXMmfOnAwePDibb755zj777NV27Fpbbrllqqur8+c//zn9+/ev+HgArBp33XVXNtpoo+y8884rtf1rr72WO++8M4cddlg23HDDTJ48Oddcc0322GOPPPfcc+nevXuS5Be/+EVOPPHEHHrooTnppJMyf/78/P3vf8/48eMzcODAJMl//dd/5bbbbsvxxx+fLbfcMlOnTs2jjz6a559/fqU+H1999dUkSadOncrLFi1alH322Se77rprLrnkkrRu3TpJMnTo0Fx77bU5+uijc+KJJ+b111/PFVdckaeffjp//vOf07x58yTJj370o5x77rnp169f+vXrl6eeeip9+/bNhx9+WFjPuHHjsv/++6dbt2456aSTss466+T555/P7373u5x00kkZOnRo3nnnnYwbNy433HBD4f6effbZ7LbbbmnXrl1OO+20NG/ePNdcc0369OmTP/3pT9lxxx3rtD/hhBPSoUOH/PjHP84bb7yRkSNH5vjjj88tt9zS4PcUPnUau+ub/0zLuiXqm9/8ZilJ6eyzz67T9vOf/3ypd+/e5d9ff/31UpJSdXV16a233iovHz9+fClJ6eSTTy4v22OPPUp77LFHveN/85vfLPXo0aP8e6W3bXfo0KG03Xbb1Vs+a9as0pQpU8qvj96+9eMf/7iUpHTkkUfW2652Xa0JEyaUkpSOO+64Ou0GDhzYoDrvv//+UpLSXXfdtcJ2K7qda9iwYaWmTZsuc13nzp1LRxxxRPn3xYsXl3bddddS165dS++//35p2LBhpWbNmq3wtvxVdexam266aWnfffdd7vEAWL1mzpxZSlI68MADG7zNx29Pnj9/fmnx4sV12rz++uulli1b1rk+OPDAA0tbbbXVCve91lprlYYNG9bgWmrVXqPcf//9pSlTppQmTZpUuvnmm0udOnWqc+1Re93y3//933W2f+SRR0pJSjfeeGOd5X/4wx/qLH/vvfdKLVq0KO233351hlidccYZpSR13pcHH3ywlKT04IMPlkqlUmnRokWlDTfcsNSjR4/S9OnT6xzno/ta0Wftx68nDjrooFKLFi1Kr776annZO++8U2rbtm1p9913r/f+7LXXXnWOdfLJJ5eaNm1amjFjxjKPB58FbttmjfPxCa522223vPbaa/XaHXTQQVl33XXLv++www7Zcccdc/fdd6/2GmfNmpWampp6y7/xjW+kc+fO5ddHb1mu9fHzW5baczjxxBPrLP/ud7/boPqmTp2aJOnQoUOD2i/LvHnz0qJFi2Wua9WqVZ0Jzpo0aZJrr702s2fPzr777purrroq3//+9+v1HK+OY9fq0KFD3n///ZU6HgD/vlmzZiVJ2rZtu9L7aNmyZZo0WXp5unjx4kydOjU1NTXZbLPN6txu3b59+7z11lt54oknlruv9u3bZ/z48XnnnXdWqpa99tornTt3zvrrr58jjjgiNTU1ueOOO+pceySpd2fcmDFjstZaa2XvvffO+++/X3717t07NTU1efDBB5Mk999/fz788MOccMIJdW6nbshn/dNPP53XX3893/3ud9O+ffs66xr66MuPWrx4ce67774cdNBBdSb07NatWwYOHJhHH320/Pet9Z3vfKfOsXbbbbcsXrz4M/14TBCeWaO0atWqPP64VocOHeqNEUqSTTbZpN6yTTfdNG+88cbqKq+sbdu2mT17dr3lZ599dsaNG7fCsbcbbrhh4f4nTpyYJk2aZOONN66zfLPNNquoztIKbgsvUl1dvdzbxubPn19v7PLGG2+cESNG5IknnshWW22VM8888xM7drL0XFfmggGAVaNdu3ZJlo41XllLlizJT3/602yyySZp2bJl1l577XTu3Dl///vfM3PmzHK7008/PTU1Ndlhhx2yySabZNiwYfnzn/9cZ18XX3xx/vnPf2b99dfPDjvskBEjRizzy/jlufLKKzNu3Lg8+OCDee655/Laa69ln332qdOmWbNmWW+99eose/nllzNz5sx06dKlzhfqnTt3zuzZs/Pee+8lSTlkfvx6pnPnzoVfftfeQr711ls3+HxWZMqUKZk7d+4yrzO22GKLLFmyJJMmTaqzfIMNNqjze23Ny7pmg88KY55ZozRt2nSV7q+qqmqZAfKjE5CtjM033zzPPPNMFi5cWB63lKx4nHSthkyY9e+qHY/173yAdevWLYsXL857772XLl26lJd/+OGHmTp1annc2Ufdd999SZJ33nknU6dOzTrrrPOJHXv69OnL/EIFgE9Gu3bt0r1793qTd1bi/PPPz5lnnpljjjkm55xzTjp27JgmTZrku9/9bpYsWVJut8UWW+TFF1/M7373u/zhD3/I2LFjc9VVV+VHP/pR+dFMhx9+eHbbbbfccccdue+++/KTn/wkF110UW6//fbsu+++hbXssMMOhXdQfbSnvNaSJUvSpUuX3Hjjjcvc5uOdBJ9Wy7tm+3e+uIc1nZ5nPrVefvnlesteeuml8izaydJvQWfMmFGv3cdvKaq0x3L//ffPvHnzcscdd1S0XUP16NEjS5YsKX+zXOvFF19s0Pa1M4DXzgi6MrbbbrskyZNPPlln+ZNPPpklS5aU19f62c9+lnHjxuW8887Lhx9+mKFDh35ix160aFEmTZqULbbYYqWPCcC/b//998+rr76av/zlLyu1/W233ZYvf/nLGT16dI444oj07ds3e+211zI/y9u0aZMBAwbk17/+dd58883st99+Oe+88zJ//vxym27duuW4447LnXfemddffz2dOnXKeeedt7Kn1yAbb7xxpk6dml122SV77bVXvde2226bZOlnfVL/embKlCmFX37X3plW9EVFQ69vOnfunNatWy/zOuOFF15IkyZNsv766zdoX/BZJjzzqXXnnXfm7bffLv/++OOPZ/z48XW+Td54443zwgsv1Hl0wjPPPFPv1q7a2TGX9eG8LMcee2y6du2ak08+OS+99FK99f/ut66153D55ZfXWT5y5MgGbb/uuutm/fXXrxc+K7HnnnumY8eOufrqq+ssv/rqq9O6des6M3+//vrrGT58eA455JCcccYZueSSS/Lb3/42119//Wo/dpI899xzmT9//krP7grAqnHaaaelTZs2GTJkSCZPnlxv/auvvlp+lNKyNG3atN5n6JgxY+p83if/N7dHrRYtWmTLLbdMqVTKwoULs3jx4jq3eSdJly5d0r179yxYsKDS06rI4YcfnsWLF+ecc86pt27RokXla4299torzZs3z6hRo+qcc0M+67fffvtsuOGGGTlyZL1rl4/uq02bNkmKr2+aNm2avn375n//93/rDH+bPHlybrrppuy6667l2/LhP5nbtvnU6tWrV3bdddcce+yxWbBgQUaOHJlOnTrltNNOK7c55phj8v/+3//LPvvsk29961t577338rOf/SxbbbVVnYkvqqurs+WWW+aWW27Jpptumo4dO2brrbde7liijh075o477sgBBxyQbbfdNkcccUS++MUvpnnz5pk0aVLGjBmTpP54oIbabrvtcuSRR+aqq67KzJkzs/POO+eBBx7IK6+80uB9HHjggbnjjjvqjQWeOHFi+ZEVteH63HPPTbL0W/BvfOMbSZa+J+ecc06GDRuWww47LPvss08eeeSR/OY3v8l5552Xjh07Jln6IX3MMcekurq6HHaHDh2asWPH5qSTTspee+1Vvs16VR+71rhx49K6devsvffeDX5/AFj1Nt5449x0000ZMGBAtthiiwwaNChbb711Pvzwwzz22GMZM2ZMBg8evNzt999//5x99tk5+uijs/POO+cf//hHbrzxxjqTWCVJ3759s84662SXXXZJ165d8/zzz+eKK67Ifvvtl7Zt22bGjBlZb731cuihh2bbbbdNTU1N7r///jzxxBO59NJLV+t7sMcee2To0KG54IILMmHChPTt2zfNmzfPyy+/nDFjxuSyyy7LoYcems6dO+fUU0/NBRdckP333z/9+vXL008/nXvuuSdrr732Co/RpEmTXH311TnggAOy3Xbb5eijj063bt3ywgsv5Nlnn829996bZOkjHpOlE5Dus88+adq0aY444ohl7vPcc8/NuHHjsuuuu+a4445Ls2bNcs0112TBggW5+OKLV+2bBJ9WjTTLN//hlveoqjZt2tRr+/HHONU+quonP/lJ6dJLLy2tv/76pZYtW5Z222230jPPPFNv+9/85jeljTbaqNSiRYvSdtttV7r33nvrPaqqVCqVHnvssVLv3r1LLVq0aPBjq/71r3+Vhg8fXtpyyy1L1dXVpZYtW5Y22mij0qBBg0oPP/zwMs9jypQphedYKpVK8+bNK5144omlTp06ldq0aVM64IADSpMmTWpwbU899VQpSemRRx6ps7z2cRfLei3rsV4///nPS5tttlmpRYsWpY033rj005/+tM6jKS677LJSktLYsWPrbPfmm2+W2rVrV+rXr99qO3atHXfcsfT1r3+98D0B4JPx0ksvlb797W+XevbsWWrRokWpbdu2pV122aU0atSo0vz588vtlvWoqu9973ulbt26laqrq0u77LJL6S9/+Uu9R09ec801pd13373UqVOnUsuWLUsbb7xxafjw4aWZM2eWSqVSacGCBaXhw4eXtt1221Lbtm1Lbdq0KW277balq666qrD2ZV2jLMvyrltq/fznPy/17t27VF1dXWrbtm1pm222KZ122mmld955p9xm8eLFpbPOOqt8vn369Cn985//rPe+fPxRVbUeffTR0t57710+x8997nOlUaNGldcvWrSodMIJJ5Q6d+5cqqqqqnOtsazriaeeeqq0zz77lGpqakqtW7cuffnLXy499thjDXp/llcjfJZUlUpG9fPp8sYbb2TDDTfMT37yk5x66qmNXc4a7Stf+Uq6d+9e7u39LJowYUK23377PPXUU/XGQgMAwKpizDN8hp1//vm55ZZbPtPPXLzwwgtz6KGHCs4AAKxWxjzDZ9iOO+643Oclf1bcfPPNjV0CAAD/AfQ8AwAAQAFjngEAAKCAnmcAAAAoIDwDAABAAeEZAAAACjR4tu0NL7t0ddaxWqz1YlVjl1CROes1dgWVa7Lw0/UeJ0nNF99v7BIqVjOqXWOXULF3d2zR2CVUZL0H5zV2CRU76he/b+wSKnb+hK82dgkVe+XwMxu7BABgDaDnGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUaNbQhjVvfPpy9uwNSo1dQkWabfpBY5fwH+H9KW0bu4SKtfne+41dQsXmv9qlsUuoyFt7Vjd2CRV7/IONGruEirX+c01jl1C5wxu7AABgTfDpS8QAAADwCROeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACjQrKEN53Urrc46Vou2rzd2BZWZN6ddY5dQuc/PauwKKtayzYeNXULFJr7SpbFLqFjrSQ3+72WNsN4FjzV2CRX788ydG7uEis3ecEljlwAAsFL0PAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQoFlDG67zl8Wrs47VotS0qrFLqMi0Ly1q7BIq1rX1/MYuoWLTJnRu7BIq1m7yp+vfcpIc9q0/NnYJFbl27T6NXULFFrdb2NglVKx6YvPGLgEAYKXoeQYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABZo1tGGLWYtWZx2rxevfKjV2CRVpXf1hY5dQsU07vNfYJVTsiQVdGruEis1f+9P1bzlJbrp1z8YuoSJNW3763uNXjvxFY5dQsX57HNzYJVTu7MYuAABYE+h5BgAAgALCMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUEB4BgAAgALCMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUEB4BgAAgALCMwAAABQQngEA+Mzo06dPqqqqMmLEiHrrevbsmaqqqlx77bWfeF2rW1VVVaqqqvLQQw81dinwmSU8AwCQJBkxYkQ5hH301apVq6y33nr52te+lltvvTWlUqmxS10jvPHGGxkxYsQyg/pnyfL+XXz89corryx3HwsWLMioUaOy6667pkOHDmnVqlV69uyZIUOG5LnnnvsEzwZWXrPGLgAAgDVP165dyz/PnDkzb7/9dt5+++3cddddufbaa3PHHXekZcuWjVhh5TbeeOO0atUqa6211irZ3xtvvJGzzjorST7zATpJmjdvno4dOy53fbNmy44W7777bvr165enn366vJ+amppMnDgxo0ePzm9+85v86le/ysCBA1dL3bCq6HkGAKCed999t/yaM2dO/vnPf2bvvfdOktxzzz354Q9/2MgVVu6BBx7ICy+8kP79+zd2KZ9KO++8c51/Fx9/9ezZs942pVIphxxySJ5++ulUV1fnF7/4RWbNmpVp06blnXfeyaBBg7JgwYIMHjw4f/vb3z75k4IKCM8AAKxQkyZNstVWW+W3v/1tevXqlSS55pprsmjRokaujDXd73//+zz22GNJkgsuuCBDhgxJq1atkiTdunXLddddly996UtZuHBhTjvttMYsFQoJzwAANEirVq1y2GGHJUk++OCDvPDCC0mW3r5cO+71jTfeyKuvvprvfOc72XDDDdOyZct6PZJLlizJjTfemH79+qVr165p0aJFOnfunL59++Z//ud/VjimevHixRk1alS23377tGnTJh07dkyfPn1y2223FdbfkAnDxo8fn6OPPjq9evVK69at065du2y55ZY55phjcu+999bZ15e//OXy7x8f/zt48OB6+/7ggw9y4YUXZqeddkrHjh3TsmXLrL/++jniiCPyl7/8ZYW1T58+PcOHDy/fet6tW7ccdthha3xv7e9///skSZs2bXLccccts83w4cOTJH/84x/z5ptvfmK1QaWMeQYAoMHWW2+98s+zZs2qt/6xxx7L0KFDM3v27LRu3TrNmzevs37atGnp379/Hn744fKytdZaK++//37GjRuXcePG5eabb86YMWPSokWLOtsuWLAgBx54YDnENmnSJC1atMjDDz+cP/3pTzn99NNX+rwWL16cU045JZdffnl5WZs2bdKsWbO88MILef7553P77bdnxowZSZLOnTtn1qxZmT59epK6Y8Rrz+mjJkyYkAMOOCBvvfVWkqRp06Zp3bp13nrrrdxyyy259dZbc9555+X73/9+vdreeOON9OnTJxMnTkyStGjRInPnzs1tt92W3/72txkzZswKz23w4MG57rrrkuQTn+yttuZevXrV+7dQa4sttij/fN9992XIkCGfSG1QKT3PAAA02BtvvFH+eVmTRw0dOjRbbbVVnnjiicyZMyezZ8/Offfdl2RpQD344IPz8MMPZ7vttstdd92VOXPmZMaMGZk9e3auu+66dOnSJb/97W+XGYS///3v5957701VVVXOPffcTJ8+PdOnT8+7776bY489NhdddFEmTJiwUud1xhlnlIPzMccckxdffDGzZ8/OtGnTMn369Nx555356le/Wm7/xBNP5Pbbby///vHxv5dddll53b/+9a/ss88+eeutt3LwwQfnySefzLx58zJr1qxMnjw5Z555Zpo2bZozzjgjd955Z526Fi9enMMOOywTJ05Mhw4dcuutt2bOnDmZOXNmnn322ey444755je/uVLnXKlnn302W2+9dVq3bp2amppsttlm+fa3v12eCGxFFi9e3KB1//jHP1ZJrbA6CM8AADTIrFmzcuONNyZZGpw33XTTem06deqU+++/P1/4whfKy2rb3XTTTfnTn/6UzTffPA899FD233//tG7dOsnSXt5Bgwbl7rvvTlVVVa666qq899575X288847GTVqVJLkhz/8YX7wgx+kXbt2SZIuXbrkqquuypFHHpmZM2dWfF4vvfRSLrnkkiTJaaedltGjR9c5t7XWWisHHnhgbr755or3XVvve++9l4EDB2bs2LHp3bt3uRe2S5cuOfvss3PxxRcnqT9r99ixY/Pkk08mScaMGZPDDjusPKv1lltumT/84Q/p1KnTStVVqffffz/PP/98qqurs2DBgrz00kv55S9/md69ey93ArnaW/ZfeeWVzJ8/f5lt/vnPf5Z/fuedd1Z53bCqCM8AAKzQjBkz8sADD2TPPfcsh5uTTjopTZrUv5Q8/vjjU1NTs8z9jB49Okly7LHHLvdxUb17985WW22VDz/8MA8++GB5+W233ZZFixaluro6p5566jK3XdnHRV133XVZsmRJOnXqVH701Koyf/783HTTTUmywtvKBw0alCR55plnMnny5PLy2sC+yy675Ctf+Uq97Vq3bl040da1116bUqm00rdsb7LJJrn44ovz4osvZv78+Zk6dWrmzJmTe++9N717906pVMp5552XSy+9tN62/fr1S7L0fVjW+sWLF+fCCy8s/76soQCwpjDmGQCAeqqqqpa77utf/3p+8IMfLHPdLrvssszlixcvzl//+tckS0Pu+eefv9z9T5s2Lcn/jZdNUu59/cIXvlDucf64TTfdNOuuu27efvvt5e57WWpng957773LM0GvKn/729/KPa59+/Zt0DYTJ04sj6GuPe8999xzue1XtG5VOOqoo+ota9GiRfr27Zvdd989u+++e5544omMGDEiQ4YMqfPFyH777Zcdd9wx48ePz4gRI1JVVZWjjz46a6+9dp577rn84Ac/yDPPPJPmzZtn4cKFy/xCBtYUwjMAAPV8dAKsli1bZu21187nP//5HHXUUXVmmf64Ll26LHP5tGnTsmDBgiQpT7JVZO7cueWfa2/hXnfddVe4zXrrrVdxeH733XeTJD169Khou4b46G3IH+1RXpFKz/ujk7h90lq1apXzzz8/e++9d2bPnp0HHnggBx98cHl9VVVVbr/99vTr1y/PPPNMfvCDH9T74mXYsGEZP358nnzyyXTo0OGTPgVoMOEZAIB6agNlpZo2bbrM5R+dFOqee+6pM/lWY1tRL/u/66PnPW/evFXes70m2Gmnnco/v/baa/XWd+/ePePHj8+1116bO+64I6+88kqSpWO2v/3tb+eAAw4of3GxrHH0sKYQngEAWO06deqUZs2aZdGiRXVux26o2h7tol7lSnudk2SdddbJ888/v1J1NWTftSZOnJjNNtusou27dOmSSZMmrfC8VuacP2ktW7bM0KFDM3To0Hrr3nvvvfLznXfeeedPujRoMIMKAABY7Zo3b54ddtghSXLXXXdVvH3t7N1PPvlkZs+evcw2L7/8cvk5ypWoDWzjxo1b7ozQy/LR8bnLm4zri1/8Yvl51f/OeX908rSP++Mf/1jxflel2rHsSbLhhhtWvH3tDO7rrrvuah+/Df8O4RkAgE/Ed77znSTJ3XffnbvvvnuFbWsnDat1yCGHpGnTppk3b175sVIfd/bZZ69UXYMHD07Tpk0zderU/PjHP27wdh+duGzGjBnLbNOmTZsMHDgwSXLRRReVe1iX5+PnPWDAgCTJo48+moceeqhe+3nz5uUnP/lJg2uuVNEM3QsWLCiPYW7Tps0yZwRfkVdffTXnnHNOkqXP8a59DBesiYRnAAA+EV//+tez1157pVQqpX///jn33HPrTKg1Z86cPPjggxk2bFg22mijOtuuu+66GTZsWJLknHPOyQUXXJAPPvggSTJlypQcf/zx+c1vfrPcR2CtSK9evTJ8+PAkycUXX5whQ4bk5ZdfLq+fNWtWbrnllvTv37/Odptuumm5V/mXv/zlcoPm+eefn+7du+f999/PTjvtlBtuuKFce239Y8eOTf/+/XPkkUfW2faQQw7J9ttvX/557Nix5XHUzz//fPbdd99MmTJlhec3ePDgVFVVrdTY7ocffjh77bVXbrjhhjq9+gsXLswDDzyQ3XbbLePHj0+S/OhHP0r79u3r7eP666/PL37xi7z11ltZsmRJkmTmzJkZPXp0dt5550yfPj1f/epXc9xxx1VcH3ySfLUDAMAnomnTphk7dmyOOuqo/O53v8uZZ56ZM888M+3atUuTJk0yc+bMcgBdVg/kRRddlOeeey73339/zjjjjPK2M2bMSKlUyumnn56//vWv+dOf/lRxbeeee24++OCDXHnllRk9enRGjx6dmpqaNG/evLz/jwfz1q1b5xvf+EZGjx6d0047LSNGjMjaa6+dqqqqHHrooeUe8m7duuX+++/PQQcdlJdeeimDBg1KkyZN0r59+yxYsCBz5swp73Ovvfaqc4xmzZplzJgx6dOnTyZNmpRDDz00LVu2TKtWrTJz5sy0aNEiY8aMyYEHHljxOTdEqVTKAw88kAceeCBJUl1dnTZt2mTmzJlZuHBhkqW3r//3f//3cp83/dRTT+Wyyy5LsvT2/drta//Whx56aG644YbVOnEbrAp6ngEA+MS0a9cud911V+6+++4MGDAgG2ywQRYsWJC5c+dm3XXXTd++fXPBBRfkxRdfrLdtq1atcs899+Syyy7LdtttlxYtWqRUKmW33XbLrbfemgsvvHCl62ratGmuuOKKPProoznqqKOywQYbZOHChSmVStlyyy3zrW99K2PHjq233ZVXXpkRI0Zkm222SZK8+eabmThxYt5///067bbYYov8/e9/zzXXXJO+fftm7bXXzqxZs1IqldKrV68cdthh+fnPf55bb7213jE22mijTJgwIaeccko23HDDlEqltGrVKoceemgee+yxfO1rX1vp8y6yzTbb5JJLLskhhxySTTfdNNXV1ZkxY0aqq6uz7bbb5vjjj8+ECRNy3nnnLXcfAwYMyLe//e1svfXWqampybx587LeeutlwIAB+cMf/pAxY8Z8Jmch57OnqlQ0kOH/t+dXLljdtaxyr3+rQae2xmhV/WFjl1Cx3t0nNXYJFXviD1s3dgkVW9Ls0/VvOUmaLvh0fXu8uOWn7z1+8VtXN3YJFeu3x8HFjdYwf3jxosYuAQBYA+h5BgAAgALCMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAgfpPn/8MGbDV3xq7hIr872vbNHYJFXvy7k/fY5+67/FWY5dQsV7tpjR2CRV75vJtG7uEiry/XWNXULl91v18Y5dQsdcu6NrYJQAArBQ9zwAAAFBAeAYAgE/Qtddem6qqqvTs2bOxSwEqIDwDALDaTZ8+PdXV1amqqkpVVVVefvnl1XKcCRMmZMSIERk5cuRq2f+nwY033pgTTzwxu+66a3r27Jk2bdqkVatW2WCDDdK/f/+MHTt2uduOGDGi/DdqyOtPf/rTJ3hm0Lg+02OeAQBYM9x4442ZP39++fdf/epXueCCC1b5cSZMmJCzzjorPXr0yHe/+91Vvv9Pg6FDh2bOnDnl39daa60sWrQokyZNyqRJk3LnnXemb9++uf3229OmTZs629bU1KRr1xXPTzF9+vR8+OGHadmyZbbZ5tM3Zw+sLD3PAACsdqNHj06SnHDCCUmS6667LosXL27Mkj6zhgwZkuuuuy4vv/xy5s+fnxkzZmT+/Pl59dVXy+//fffdl+9973v1tj311FPz7rvvLvf15ptvpm3btkmS/v37p2PHjp/ouUFjEp4BAFitnnrqqUyYMCHt27fPxRdfnA033DD/+te/cvfddzd2aZ9JI0eOzKBBg9KrV6+0bNkySVJVVZWNNtool19+eY488sgkyfXXX5+FCxdWtO877rgjU6dOTbI0pMN/EuEZAIDVqrbXecCAAWnVqlUGDRqUZOmt2w1x33335YgjjkiPHj1SXV2djh075nOf+1xOOOGE/OUvfym3q6qqytFHH50kmThxYr3xuSNGjCi37dOnT71lH1c7/rdPnz711k2fPj2jR4/O4Ycfnm222SYdO3ZMq1at0qNHjwwcODB//etfG3RujeFLX/pSkmTevHmZNm1aRdvW/i032mij7Lnnnqu8NliTCc8AAKw28+fPz0033ZQk5dA8aNCgVFVV5Xe/+10mT5683G3nzp2bww8/PPvss09uueWWvPnmm2nevHmWLFmSf/zjH7niiity7LHHltt37do17dq1S5I0adIkXbt2rfOqqalZZed12WWXZciQIRkzZkyef/758vI333wz//M//5Odd945l19++Urtu2fPnssN7avCI488kmTp+OYuXbo0eLuJEyfmgQceSJIcc8wxqaqqWi31wZpKeAYAYLUZO3ZsZsyYkV69emXnnXdOsrTXctddd82iRYty/fXXL3fbo48+OmPGjEmTJk1y+umnZ9KkSZk1a1ZmzJiRKVOm5MYbb8xOO+1Ubv/uu+/msssuS5Ksv/769cbrnnrqqavsvLp3754f//jHefLJJzN37txMmzYt8+bNy2uvvZaTTjopSXLKKafk6aefXmXH/HfMnDkzTz75ZI455pjcdtttSZbWV0kA/tWvfpUlS5akadOm5R5++E9itm0AAFab2tt8a3udaw0aNCiPPPJIfvWrX2X48OH1tnvggQdy6623Jkm9HuYkWXvttTNw4MAMHDhwNVW+Yt/5znfqLauqqsqGG26YkSNHZtGiRbnyyitz5ZVX5pe//GUjVJjcfPPN5fHNH9WyZcucfPLJ+dGPftTgfS1ZsiTXXnttkmTfffdN9+7dV1WZ8Kmh5xkAgNXitddey0MPPZSqqqp84xvfqLPu8MMPT3V1dV544YU89thj9batHQ+99dZb1wvOnwb77bdfkuTRRx+teNs33ngjpVIpDz300L9VQ3V1dfmW9aZNmyZJmjZtmtNOOy3f+973yssa4r777subb76ZJPnWt771b9UFn1bCMwAAq8Wvf/3rlEql7LbbbunZs2edde3atctBBx2U5P96pz+qNlDvv//+q7vMlfbaa6/l1FNPTe/evdO+ffs0bdq0PDlZv379kiRvvfVWo9V34IEHlm9Znz9/fv7+97/n8MMPzznnnJOtt966zmRrRWr/Ruuss84a/TeB1Ul4BgBglfvobb4fv2W71je/+c0kya233prZs2fXWffuu+8mSXr06LH6ivw33HHHHdlyyy1z6aWX5qmnnsrMmTPLE3B17do1HTp0SJLMmTOnkStdqlmzZtlmm21y00035YQTTsjkyZMzYMCAzJs3r3DbKVOm5Le//W2SpX+zZs2M/OQ/k/AMAMAqd++995Z7XYcMGVLvsVFVVVX56le/miSZPXt2eXxzrTV5JuepU6dm8ODBWbBgQfbcc8889NBDmTt3bmbOnJnJkyfn3XffzZgxYxq7zOU6+eSTkySTJk3KPffcU9j+hhtuyIcffpjELdv8ZxOeAQBY5ZZ1K3Yl7ddZZ50kSx+PtDrU9p7Onz9/uW1mzpy5zOV33313Zs2alQ4dOuSuu+7KHnvskerq6jptanvO10Trrrtu+edXXnmlsH3t32aPPfbIJptsstrqgjWd8AwAwCr10dt8b7vttnzwwQfLfT3++ONJlo5xfvHFF8v7qH2s1V133VXRsZs0WXp5WyqVVtiu9rbqSZMmLbfN+PHjl7m8dpvNNtssrVu3Xmab+++/v7DWxvLaa6+Vf27btu0K2/7lL3/Jc889l0SvMwjPAACsUjfccEMWLlyYtdZaKwcccEBqamqW+/riF7+YzTffPEnd3ufaoPbss8/m6quvbvCx27VrlySZMWPGCtttu+22SZbeXr6sccl//OMflzuh1lprrZUkeemll5bZcz1hwoTcdNNNDa55VVq0aFFhmwsuuKD88x577LHCtrV/k/bt2+fQQw/994qDTznhGQCAVao2cB144IFp0aJFYfvDDjssSXL99deXw9+Xv/zlHHHEEUmS448/Pt///vfrzFz9/vvv55e//GW93tCtt946STJr1qx646g/6vDDD0+TJk0yderUHHnkkeV9z5s3L9ddd1369++fjh07LnPbvn37pkmTJpk2bVqOOuqovP3220mSDz/8MLfeemv69u1b2KO7Ij179kxVVVX69OlT8bYXXnhhvv71r+eee+6p8wXCokWLMn78+Bx88MG5/vrrkyQDBw7Mlltuudx9zZ49O7fccku57cdvTYf/NMIzAACrzF//+tfybb61obhIbbvJkyfn97//fXn56NGjc/DBB2fJkiW58MILs/7662ettdZK+/bt07lz53z729/O3/72tzr76tWrV77yla8kSQYMGJB27dqlZ8+e6dmzZ0aOHFlut+mmm+aHP/xhkqW3hq+//vpp37592rVrl8GDB2fPPffMcccdt8x6N9lkkwwfPjxJcvvtt2e99dZL+/btU1NTkwEDBqSmpiaXX355g859VVu0aFFuvPHG9OvXLx06dEjbtm2z9tprp7q6Ol/60pdyxx13JFn63hSNS7/lllvKs6APGTJktdcOazrhGQCAVaY2kK211lrp27dvg7bZZpttssUWW9TZPklat26dsWPH5ne/+1369++f7t27Z/78+WnWrFk+97nP5cQTT8zPf/7zevu77bbbcvLJJ2fTTTfNwoULM3HixEycOLHerdxnnXVWbrjhhnzpS19KmzZtsnjx4my33Xb52c9+lttvvz1NmzZdbs0XXnhhrr/++uywww6prq7OwoUL06tXr5xxxhl5+umn07179wad+6p2zDHHZNSoUTnkkEOy+eabp0WLFpkxY0batGmTbbbZJt/5znfyyCOP5Oabb06rVq1WuK/av8X222+fz3/+859E+bBGqyoVzabw/9vzKxcUN1rD7PD/nmzsEiryv69t09glVKw0Ya3GLqFi3fZ4q7jRGqZXuymNXULFnrl828YuoSLvb9fYFVRu4+HLnshmTfbaBV9q7BIq9upppzR2CQDAGkDPMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUEB4BgAAgALCMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUEB4BgAAgALCMwAAABQQngEAAKCA8AwAAAAFhGcAAAAoIDwDAABAAeEZAAAACgjPAAAAUKBZQxu++vVPX86ee9HOjV1CRZps8Ol7j+d3LDV2CRXrWTOtsUuo2DotZzV2CRWb9LvnG7uEikzpvUVjl1Cx12/6XGOXULHmz1Y1dgkAACvl05fWAAAA4BMmPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQoFlDGzaf3Hx11rGalBq7gIrM3mJBY5dQsf/98pWNXULFjj3tu41dQsXOveSSxi6hYrcde1pjl1CRdbf8V2OXULGB6z/e2CVU7IpnDmzsEgAAVoqeZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKNGtowy5PLVmddawWc7o0bewSKnLuznc2dgkVO+IXpzR2CRVbvG2psUuo2DcGndjYJVTsSxf+vbFLqMg/r9qmsUuo2CX79G3sEipW6vrp+ywBAEj0PAMAAEAh4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAs0a2nBOl6ars47VYm63UmOXUJEz/3BYY5dQsY6TP13vcZIcf+rYxi6hYmd1OqixS6jYu+/0aOwSKlKz5NP3b3nx7Ab/F77GaNF9bmOXAACwUvQ8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACwjMAAAAUEJ4BAACggPAMAAAABYRnAAAAKCA8AwAAQAHhGQAAAAoIzwAAAFBAeAYAAIACVaVSqdTYRQAAAMCaTM8zAAAAFBCeAQAAoIDwDAAAAAWEZwAAACggPAMAAEAB4RkAAAAKCM8AAABQQHgGAACAAsIzAAAAFPj/AGMV8IHuh1cXAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def visualize_predictions(model, test_loader, device='cpu', num_samples=5):\n",
    "    model.to(device)\n",
    "    model.eval()\n",
    "\n",
    "    samples_visualized = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, targets in test_loader:\n",
    "            inputs = inputs.to(device)\n",
    "            targets = targets.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            _, predicted = torch.max(outputs, 1)  # Predicted class indices\n",
    "\n",
    "            for i in range(inputs.size(0)):\n",
    "                input_grid = inputs[i].cpu().numpy().reshape(10, 10)  # Input grid\n",
    "\n",
    "                # Use torch.argmax() to get the class index from targets\n",
    "                predicted_class = predicted[i].item()\n",
    "                actual_class = torch.argmax(targets[i]).item()\n",
    "\n",
    "                fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n",
    "\n",
    "                # Input Grid\n",
    "                axs[0].imshow(input_grid, cmap='viridis', interpolation='nearest')\n",
    "                axs[0].set_title(\"Input Grid (10x10)\")\n",
    "                axs[0].axis('off')\n",
    "\n",
    "                # Predicted and Actual Class Labels\n",
    "                axs[1].text(0.5, 0.5, f\"Predicted: {predicted_class}\\nActual: {actual_class}\",\n",
    "                            fontsize=18, ha='center', va='center')\n",
    "                axs[1].set_title(\"Class Prediction\")\n",
    "                axs[1].axis('off')\n",
    "\n",
    "                plt.tight_layout()\n",
    "                plt.show()\n",
    "\n",
    "                samples_visualized += 1\n",
    "                if samples_visualized >= num_samples:\n",
    "                    return\n",
    "\n",
    "# Visualize predictions\n",
    "visualize_predictions(model, test_loader, device=device, num_samples=5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e1ba210-96e1-4d32-9100-c6e7835972ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data/generate_and_visualize.py\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "\n",
    "def visualize_batch(batch):\n",
    "    \"\"\"\n",
    "    Visualizes a batch of images.\n",
    "\n",
    "    Args:\n",
    "        batch (dict): Batch containing color_image, grayscale_image, numeric_image, and grid.\n",
    "    \"\"\"\n",
    "    color_images = batch['color_image']\n",
    "    grayscale_images = batch['grayscale_image']\n",
    "    numeric_images = batch['numeric_image']\n",
    "    grids = batch['grid']\n",
    "\n",
    "    batch_size = color_images.size(0)\n",
    "    fig, axs = plt.subplots(batch_size, 3, figsize=(12, 4 * batch_size))\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        # Color Image\n",
    "        axs[i, 0].imshow(color_images[i].permute(1, 2, 0))\n",
    "        axs[i, 0].set_title(f\"Color Image\\nGrid:\\n{grids[i].numpy()}\")\n",
    "        axs[i, 0].axis('off')\n",
    "\n",
    "        # Grayscale Image\n",
    "        axs[i, 1].imshow(grayscale_images[i].squeeze(), cmap='gray')\n",
    "        axs[i, 1].set_title(\"Grayscale Image\")\n",
    "        axs[i, 1].axis('off')\n",
    "\n",
    "        # Numeric Image\n",
    "        axs[i, 2].imshow(numeric_images[i].permute(1, 2, 0))\n",
    "        axs[i, 2].set_title(\"Numeric Image\")\n",
    "        axs[i, 2].axis('off')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def main():\n",
    "    train_loader, eval_loader = get_data_loaders(batch_size=4, grid_size=10, num_classes=11, augment=True)\n",
    "\n",
    "    # Get a batch of training data\n",
    "    batch = next(iter(train_loader))\n",
    "\n",
    "    # Visualize the batch\n",
    "    visualize_batch(batch)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04dcce3e-0e37-425e-a8b1-c9f03fcfb705",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data/data_conversion.py (continued)\n",
    "\n",
    "import pickle\n",
    "\n",
    "def save_datasets(train_grids, eval_grids, filepath='data/grids.pkl'):\n",
    "    \"\"\"\n",
    "    Saves the training and evaluation grids to a pickle file.\n",
    "\n",
    "    Args:\n",
    "        train_grids (list of np.ndarray): Training grids.\n",
    "        eval_grids (list of np.ndarray): Evaluation grids.\n",
    "        filepath (str, optional): Path to save the pickle file. Defaults to 'data/grids.pkl'.\n",
    "    \"\"\"\n",
    "    with open(filepath, 'wb') as f:\n",
    "        pickle.dump({'train_grids': train_grids, 'eval_grids': eval_grids}, f)\n",
    "    logger.info(f\"Saved grids to {filepath}.\")\n",
    "\n",
    "\n",
    "def load_datasets(filepath='data/grids.pkl'):\n",
    "    \"\"\"\n",
    "    Loads the training and evaluation grids from a pickle file.\n",
    "\n",
    "    Args:\n",
    "        filepath (str, optional): Path to the pickle file. Defaults to 'data/grids.pkl'.\n",
    "\n",
    "    Returns:\n",
    "        tuple: (train_grids, eval_grids)\n",
    "    \"\"\"\n",
    "    if not os.path.exists(filepath):\n",
    "        logger.error(f\"File {filepath} does not exist.\")\n",
    "        return None, None\n",
    "\n",
    "    with open(filepath, 'rb') as f:\n",
    "        data = pickle.load(f)\n",
    "    logger.info(f\"Loaded grids from {filepath}.\")\n",
    "    return data['train_grids'], data['eval_grids']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28d518c9-9d0a-43ec-b1cf-87834e72dbb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training/trainer.py\n",
    "\n",
    "# ==========================\n",
    "# 1. Standard Library Imports\n",
    "# ==========================\n",
    "import logging\n",
    "\n",
    "# ==========================\n",
    "# 2. Third-Party Library Imports\n",
    "# ==========================\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.cuda.amp import autocast, GradScaler\n",
    "from torch.optim import lr_scheduler\n",
    "from torch.utils.data import DataLoader\n",
    "from sklearn.metrics import accuracy_score, log_loss\n",
    "\n",
    "# ==========================\n",
    "# 3. Local Application/Module Imports\n",
    "# ==========================\n",
    "\n",
    "def train_regular_model(\n",
    "    model, train_loader, eval_loader, num_epochs, initial_lr, gui, model_num, \n",
    "    total_models, device, tuner, shared_layer=None, redis_manager=None\n",
    "):\n",
    "    \"\"\"\n",
    "    Trains a single model over a specified number of epochs.\n",
    "    \"\"\"\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=initial_lr, weight_decay=1e-4)\n",
    "    scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n",
    "    criterion = nn.CrossEntropyLoss(label_smoothing=0.1)\n",
    "    scaler = GradScaler() if torch.cuda.is_available() else None\n",
    "\n",
    "    best_val_loss, best_val_accuracy = float('inf'), 0.0\n",
    "\n",
    "    for epoch in range(1, num_epochs + 1):\n",
    "        model.train()\n",
    "\n",
    "        total_loss, correct_predictions, total_samples = 0, 0, 0\n",
    "\n",
    "        for batch_idx, (inputs, labels) in enumerate(train_loader):\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            if shared_layer:\n",
    "                inputs = shared_layer(inputs)\n",
    "\n",
    "            try:\n",
    "                with autocast(enabled=torch.cuda.is_available()):\n",
    "                    outputs = model(inputs)\n",
    "                    loss = criterion(outputs, labels) / 4\n",
    "\n",
    "                scaler.scale(loss).backward() if scaler else loss.backward()\n",
    "\n",
    "                if (batch_idx + 1) % 4 == 0:\n",
    "                    if scaler:\n",
    "                        scaler.step(optimizer)\n",
    "                        scaler.update()\n",
    "                    else:\n",
    "                        optimizer.step()\n",
    "                    optimizer.zero_grad()\n",
    "\n",
    "                total_loss += loss.item() * 4\n",
    "                _, predicted = torch.max(outputs, 1)\n",
    "                correct_predictions += (predicted == labels).sum().item()\n",
    "                total_samples += labels.size(0)\n",
    "\n",
    "            except Exception as e:\n",
    "                logging.error(f\"Error in batch {batch_idx}: {e}\")\n",
    "                continue\n",
    "\n",
    "        avg_train_loss = total_loss / len(train_loader)\n",
    "        train_accuracy = correct_predictions / total_samples\n",
    "\n",
    "        val_loss, val_accuracy = evaluate_model(model, eval_loader, criterion, device)\n",
    "\n",
    "        scheduler.step(val_loss)\n",
    "\n",
    "        # Use Hyperparameter Tuner to adjust learning rate\n",
    "        if tuner:\n",
    "            tuner.adjust_learning_rate(optimizer, val_loss)\n",
    "            if tuner.early_stopping():\n",
    "                logging.info(\"Early stopping triggered by HyperparameterTuner.\")\n",
    "                break\n",
    "\n",
    "        # Update Redis with current metrics\n",
    "        if redis_manager:\n",
    "            current_metrics = {\n",
    "                'model_num': model_num,\n",
    "                'total_models': total_models,\n",
    "                'epoch': epoch,\n",
    "                'total_epochs': num_epochs,\n",
    "                'loss': avg_train_loss,\n",
    "                'accuracy': train_accuracy,\n",
    "                'val_loss': val_loss,\n",
    "                'val_accuracy': val_accuracy,\n",
    "                'lr': optimizer.param_groups[0]['lr']\n",
    "            }\n",
    "            redis_manager.set_value('current_metrics', current_metrics)\n",
    "\n",
    "        gui.queue.put({\n",
    "            'type': 'epoch',\n",
    "            'model_num': model_num,\n",
    "            'total_models': total_models,\n",
    "            'epoch': epoch,\n",
    "            'total_epochs': num_epochs,\n",
    "            'loss': avg_train_loss,\n",
    "            'accuracy': train_accuracy,\n",
    "            'val_loss': val_loss,\n",
    "            'val_accuracy': val_accuracy,\n",
    "            'lr': optimizer.param_groups[0]['lr']\n",
    "        })\n",
    "\n",
    "    return model, None\n",
    "\n",
    "def evaluate_model(model, eval_loader, criterion, device):\n",
    "    \"\"\"\n",
    "    Evaluates the model on the evaluation dataset.\n",
    "    \n",
    "    Args:\n",
    "        model (nn.Module): The trained model.\n",
    "        eval_loader (DataLoader): DataLoader for evaluation data.\n",
    "        criterion (nn.Module): Loss function.\n",
    "        device (torch.device): Device to perform computation on.\n",
    "    \n",
    "    Returns:\n",
    "        tuple: (average_loss, accuracy)\n",
    "    \"\"\"\n",
    "    model.eval()\n",
    "    total_loss, correct_predictions, total_samples = 0, 0, 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in eval_loader:\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            total_loss += loss.item()\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            correct_predictions += (predicted == labels).sum().item()\n",
    "            total_samples += labels.size(0)\n",
    "\n",
    "    avg_loss = total_loss / len(eval_loader)\n",
    "    accuracy = correct_predictions / total_samples\n",
    "\n",
    "    return avg_loss, accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce9f9dff-29a6-445c-a924-b1ec899f82bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training/trainer.py (excerpt)\n",
    "\n",
    "from data.data_conversion import get_data_loaders_variable_sizes\n",
    "from models import MLPMagician, CNNMagician  # Import necessary models\n",
    "from torch import nn, optim\n",
    "\n",
    "def main_training():\n",
    "    # Parameters\n",
    "    batch_size = 32\n",
    "    grid_sizes = [3, 5, 10]\n",
    "    num_classes = 11\n",
    "    augment = True\n",
    "    num_models = 6\n",
    "    num_epochs = 50\n",
    "    initial_lr = 0.001\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "    # Create data loaders\n",
    "    train_loader, eval_loader = get_data_loaders_variable_sizes(\n",
    "        batch_size=batch_size,\n",
    "        grid_sizes=grid_sizes,\n",
    "        num_classes=num_classes,\n",
    "        augment=augment\n",
    "    )\n",
    "\n",
    "    # Initialize models, optimizers, loss functions, etc.\n",
    "    models = []\n",
    "    for i in range(num_models):\n",
    "        model = MLPMagician(input_size=grid_sizes[-1]**2, hidden_sizes=[256, 128, 64], dropout_rate=0.5)\n",
    "        model.to(device)\n",
    "        models.append(model)\n",
    "\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizers = [optim.AdamW(model.parameters(), lr=initial_lr, weight_decay=1e-4) for model in models]\n",
    "\n",
    "    # Training loop\n",
    "    for epoch in range(1, num_epochs + 1):\n",
    "        for model, optimizer in zip(models, optimizers):\n",
    "            model.train()\n",
    "            running_loss = 0.0\n",
    "            correct = 0\n",
    "            total = 0\n",
    "\n",
    "            for batch in train_loader:\n",
    "                inputs = batch['color_image'].to(device)\n",
    "                targets = batch['grid'].to(device).view(-1)  # Flatten targets\n",
    "\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, targets)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "\n",
    "                running_loss += loss.item() * inputs.size(0)\n",
    "                _, predicted = torch.max(outputs.data, 1)\n",
    "                total += targets.size(0)\n",
    "                correct += (predicted == targets).sum().item()\n",
    "\n",
    "            epoch_loss = running_loss / len(train_loader.dataset)\n",
    "            epoch_acc = correct / total\n",
    "            logger.info(f\"Model {model.__class__.__name__} - Epoch {epoch}/{num_epochs} - Loss: {epoch_loss:.4f} - Accuracy: {epoch_acc:.4f}\")\n",
    "\n",
    "        # Evaluation at the end of each epoch\n",
    "        for model in models:\n",
    "            model.eval()\n",
    "            val_loss = 0.0\n",
    "            correct = 0\n",
    "            total = 0\n",
    "\n",
    "            with torch.no_grad():\n",
    "                for batch in eval_loader:\n",
    "                    inputs = batch['color_image'].to(device)\n",
    "                    targets = batch['grid'].to(device).view(-1)\n",
    "\n",
    "                    outputs = model(inputs)\n",
    "                    loss = criterion(outputs, targets)\n",
    "                    val_loss += loss.item() * inputs.size(0)\n",
    "\n",
    "                    _, predicted = torch.max(outputs.data, 1)\n",
    "                    total += targets.size(0)\n",
    "                    correct += (predicted == targets).sum().item()\n",
    "\n",
    "            avg_val_loss = val_loss / len(eval_loader.dataset)\n",
    "            val_accuracy = correct / total\n",
    "            logger.info(f\"Model {model.__class__.__name__} - Validation Loss: {avg_val_loss:.4f} - Validation Accuracy: {val_accuracy:.4f}\")\n",
    "\n",
    "    logger.info(\"Training completed.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main_training()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b0bcb53-fa0a-4da1-993e-bb724de0be34",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/mlp_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import logging\n",
    "\n",
    "class MLPMagician(nn.Module):\n",
    "    def __init__(self, input_size, hidden_sizes, dropout_rate=0.5, num_classes=10):\n",
    "        \"\"\"\n",
    "        Initializes the MLPMagician model.\n",
    "\n",
    "        Args:\n",
    "            input_size (int): Number of input features.\n",
    "            hidden_sizes (list): List containing the number of neurons in each hidden layer.\n",
    "            dropout_rate (float): Dropout rate for regularization.\n",
    "            num_classes (int): Number of output classes.\n",
    "        \"\"\"\n",
    "        super(MLPMagician, self).__init__()\n",
    "        layers = []\n",
    "        prev_size = input_size\n",
    "        for idx, hidden_size in enumerate(hidden_sizes):\n",
    "            layers.append(nn.Linear(prev_size, hidden_size))\n",
    "            layers.append(nn.ReLU())\n",
    "            layers.append(nn.Dropout(dropout_rate))\n",
    "            prev_size = hidden_size\n",
    "        layers.append(nn.Linear(prev_size, num_classes))\n",
    "        self.network = nn.Sequential(*layers)\n",
    "        \n",
    "        # Initialize weights\n",
    "        initialize_weights(self)\n",
    "        logging.info(\"Initialized MLPMagician model with layers: {}\".format(self.network))\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, input_size).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, num_classes).\n",
    "        \"\"\"\n",
    "        return self.network(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59810f1e-3399-46fd-9ca0-1e5df112230e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data/test_data_conversion.py\n",
    "\n",
    "import unittest\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "\n",
    "class TestDataConversion(unittest.TestCase):\n",
    "    def setUp(self):\n",
    "        self.grid = np.array([\n",
    "            [0, 1, 2],\n",
    "            [3, 4, 5],\n",
    "            [6, 7, 8]\n",
    "        ])\n",
    "        self.color_map = {\n",
    "            0: [0, 0, 0],\n",
    "            1: [255, 0, 0],\n",
    "            2: [0, 255, 0],\n",
    "            3: [0, 0, 255],\n",
    "            4: [255, 255, 0],\n",
    "            5: [255, 165, 0],\n",
    "            6: [128, 0, 128],\n",
    "            7: [0, 255, 255],\n",
    "            8: [255, 192, 203],\n",
    "        }\n",
    "\n",
    "    def test_grid_to_image(self):\n",
    "        img = grid_to_image(self.grid, self.color_map)\n",
    "        self.assertIsInstance(img, Image.Image)\n",
    "        self.assertEqual(img.size, (3, 3))\n",
    "        pixels = img.load()\n",
    "        self.assertEqual(pixels[0, 0], (0, 0, 0))          # Black\n",
    "        self.assertEqual(pixels[1, 0], (255, 0, 0))        # Red\n",
    "        self.assertEqual(pixels[2, 0], (0, 255, 0))        # Green\n",
    "\n",
    "    def test_grid_to_grayscale(self):\n",
    "        img = grid_to_grayscale(self.grid)\n",
    "        self.assertIsInstance(img, Image.Image)\n",
    "        self.assertEqual(img.mode, 'L')                     # Grayscale\n",
    "        self.assertEqual(img.size, (3, 3))\n",
    "        pixels = img.load()\n",
    "        self.assertEqual(pixels[0, 0], 0)                   # Minimum value normalized to 0\n",
    "        self.assertEqual(pixels[1, 1], 127)                 # Mid value\n",
    "\n",
    "    def test_grid_to_numeric_image(self):\n",
    "        img = grid_to_numeric_image(self.grid)\n",
    "        self.assertIsInstance(img, Image.Image)\n",
    "        self.assertEqual(img.mode, 'RGB')\n",
    "        self.assertEqual(img.size, (150, 150))               # 3x3 grid with cell_size=50\n",
    "        pixels = img.load()\n",
    "        self.assertEqual(pixels[25, 25], (255, 0, 0))        # Number 1 in red cell\n",
    "        self.assertEqual(pixels[75, 75], (255, 255, 0))      # Number 4 in yellow cell\n",
    "\n",
    "    def test_augment_image(self):\n",
    "        img = grid_to_image(self.grid, self.color_map)\n",
    "        augmented_img, dead_squares = augment_image(img, self.grid, perturb_prob=0.0, dead_square_prob=1.0, noise_prob=0.0)\n",
    "        self.assertEqual(len(dead_squares), 1)               # Only one dead square expected\n",
    "        self.assertIsInstance(augmented_img, Image.Image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dae5062f-51cd-4bf1-9c73-06b5697a28cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data/data_conversion.py (continued)\n",
    "\n",
    "def generate_grids_variable_sizes(num_grids_per_size, grid_sizes, num_classes):\n",
    "    \"\"\"\n",
    "    Generates grids of multiple sizes.\n",
    "\n",
    "    Args:\n",
    "        num_grids_per_size (int): Number of grids per size.\n",
    "        grid_sizes (list of int): List of grid sizes (e.g., [3, 5, 10]).\n",
    "        num_classes (int): Number of classes/colors.\n",
    "\n",
    "    Returns:\n",
    "        list of np.ndarray: Generated grids.\n",
    "    \"\"\"\n",
    "    grids = []\n",
    "    for size in grid_sizes:\n",
    "        grids.extend(generate_grids(num_grids=num_grids_per_size, grid_size=size, num_classes=num_classes))\n",
    "    logger.info(f\"Generated {len(grids)} grids of varying sizes: {grid_sizes}.\")\n",
    "    return grids\n",
    "\n",
    "\n",
    "def get_data_loaders_variable_sizes(batch_size=32, grid_sizes=[3, 5, 10], num_classes=11, augment=True):\n",
    "    \"\"\"\n",
    "    Creates DataLoader instances for training and evaluation with variable grid sizes.\n",
    "\n",
    "    Args:\n",
    "        batch_size (int, optional): Number of samples per batch. Defaults to 32.\n",
    "        grid_sizes (list of int, optional): List of grid sizes. Defaults to [3, 5, 10].\n",
    "        num_classes (int, optional): Number of classes/colors. Defaults to 11.\n",
    "        augment (bool, optional): Whether to apply data augmentation. Defaults to True.\n",
    "\n",
    "    Returns:\n",
    "        DataLoader: Training DataLoader.\n",
    "        DataLoader: Evaluation DataLoader.\n",
    "    \"\"\"\n",
    "    # Generate grids for training and evaluation\n",
    "    train_grids = generate_grids_variable_sizes(num_grids_per_size=1000, grid_sizes=grid_sizes, num_classes=num_classes)\n",
    "    eval_grids = generate_grids_variable_sizes(num_grids_per_size=200, grid_sizes=grid_sizes, num_classes=num_classes)\n",
    "\n",
    "    # Define transformations\n",
    "    transform = transforms.Compose([\n",
    "        transforms.Resize((256, 256)),\n",
    "        transforms.ToTensor(),\n",
    "    ])\n",
    "\n",
    "    # Create datasets\n",
    "    train_dataset = GridDataset(train_grids, transform=transform, augmentation=augment)\n",
    "    eval_dataset = GridDataset(eval_grids, transform=transform, augmentation=False)\n",
    "\n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n",
    "    eval_loader = DataLoader(eval_dataset, batch_size=batch_size, shuffle=False, num_workers=4)\n",
    "\n",
    "    logger.info(\"Created training and evaluation DataLoaders with variable grid sizes.\")\n",
    "    return train_loader, eval_loader\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46b86de8-5763-43d0-9476-7bbdfb7cb1e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/cnn_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from utils.weight_initialization import initialize_weights\n",
    "import logging\n",
    "\n",
    "class CNNMagician(nn.Module):\n",
    "    def __init__(self, dropout_rate=0.5, num_classes=10):\n",
    "        \"\"\"\n",
    "        Initializes the CNNMagician model.\n",
    "\n",
    "        Args:\n",
    "            dropout_rate (float): Dropout rate for regularization.\n",
    "            num_classes (int): Number of output classes.\n",
    "        \"\"\"\n",
    "        super(CNNMagician, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)  # Assuming grayscale input\n",
    "        self.bn1 = nn.BatchNorm2d(32)\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.bn2 = nn.BatchNorm2d(64)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n",
    "        self.bn3 = nn.BatchNorm2d(128)\n",
    "        self.fc1 = nn.Linear(128 * 3 * 3, 128)  # Adjust based on input size\n",
    "        self.fc2 = nn.Linear(128, num_classes)\n",
    "        self.dropout = nn.Dropout(dropout_rate)\n",
    "        \n",
    "        # Initialize weights\n",
    "        initialize_weights(self)\n",
    "        logging.info(\"Initialized CNNMagician model with layers.\")\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, 1, 28, 28).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, num_classes).\n",
    "        \"\"\"\n",
    "        x = self.pool(F.relu(self.bn1(self.conv1(x))))  # [32, H/2, W/2]\n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))  # [64, H/4, W/4]\n",
    "        x = self.pool(F.relu(self.bn3(self.conv3(x))))  # [128, H/8, W/8]\n",
    "        x = x.view(x.size(0), -1)  # Flatten\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        return self.fc2(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f72f429b-6e98-4f3a-a892-6512dac0b3f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/resnet_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import logging\n",
    "\n",
    "class ResNetBlock(nn.Module):\n",
    "    def __init__(self, in_channels, out_channels, stride=1):\n",
    "        \"\"\"\n",
    "        Initializes a single ResNet block.\n",
    "\n",
    "        Args:\n",
    "            in_channels (int): Number of input channels.\n",
    "            out_channels (int): Number of output channels.\n",
    "            stride (int): Stride for the convolution.\n",
    "        \"\"\"\n",
    "        super(ResNetBlock, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1)\n",
    "        self.bn1 = nn.BatchNorm2d(out_channels)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)\n",
    "        self.bn2 = nn.BatchNorm2d(out_channels)\n",
    "        \n",
    "        self.downsample = None\n",
    "        if stride != 1 or in_channels != out_channels:\n",
    "            self.downsample = nn.Sequential(\n",
    "                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride),\n",
    "                nn.BatchNorm2d(out_channels)\n",
    "            )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the ResNet block.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor.\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output tensor after residual connection.\n",
    "        \"\"\"\n",
    "        identity = x\n",
    "        out = self.relu(self.bn1(self.conv1(x)))\n",
    "        out = self.bn2(self.conv2(out))\n",
    "        if self.downsample:\n",
    "            identity = self.downsample(x)\n",
    "        out += identity\n",
    "        out = self.relu(out)\n",
    "        return out\n",
    "\n",
    "class ResNetMagician(nn.Module):\n",
    "    def __init__(self, num_classes=10):\n",
    "        \"\"\"\n",
    "        Initializes the ResNetMagician model.\n",
    "\n",
    "        Args:\n",
    "            num_classes (int): Number of output classes.\n",
    "        \"\"\"\n",
    "        super(ResNetMagician, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3)  # Assuming grayscale input\n",
    "        self.bn1 = nn.BatchNorm2d(64)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n",
    "        \n",
    "        # Define ResNet layers\n",
    "        self.layer1 = self._make_layer(64, 64, blocks=2, stride=1)\n",
    "        self.layer2 = self._make_layer(64, 128, blocks=2, stride=2)\n",
    "        self.layer3 = self._make_layer(128, 256, blocks=2, stride=2)\n",
    "        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n",
    "        self.fc = nn.Linear(256, num_classes)\n",
    "        \n",
    "        # Initialize weights\n",
    "        initialize_weights(self)\n",
    "        logging.info(\"Initialized ResNetMagician model with layers.\")\n",
    "\n",
    "    def _make_layer(self, in_channels, out_channels, blocks, stride):\n",
    "        \"\"\"\n",
    "        Creates a ResNet layer composed of multiple ResNet blocks.\n",
    "\n",
    "        Args:\n",
    "            in_channels (int): Number of input channels.\n",
    "            out_channels (int): Number of output channels.\n",
    "            blocks (int): Number of ResNet blocks.\n",
    "            stride (int): Stride for the first block.\n",
    "\n",
    "        Returns:\n",
    "            nn.Sequential: Sequential container of ResNet blocks.\n",
    "        \"\"\"\n",
    "        layers = []\n",
    "        layers.append(ResNetBlock(in_channels, out_channels, stride))\n",
    "        for _ in range(1, blocks):\n",
    "            layers.append(ResNetBlock(out_channels, out_channels))\n",
    "        return nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the ResNetMagician model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, 1, 224, 224).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, num_classes).\n",
    "        \"\"\"\n",
    "        x = self.relu(self.bn1(self.conv1(x)))  # [64, H/2, W/2]\n",
    "        x = self.maxpool(x)  # [64, H/4, W/4]\n",
    "        \n",
    "        x = self.layer1(x)  # [64, H/4, W/4]\n",
    "        x = self.layer2(x)  # [128, H/8, W/8]\n",
    "        x = self.layer3(x)  # [256, H/16, W/16]\n",
    "        \n",
    "        x = self.avgpool(x)  # [256, 1, 1]\n",
    "        x = torch.flatten(x, 1)  # [256]\n",
    "        x = self.fc(x)  # [num_classes]\n",
    "        return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a91c10e-6114-4ebf-ab29-3d7c5e38deab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/vision_transformer_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision.models import vit_b_16\n",
    "import logging\n",
    "\n",
    "class VisionTransformerMagician(nn.Module):\n",
    "    def __init__(self, num_classes=10, pretrained=True):\n",
    "        \"\"\"\n",
    "        Initializes the VisionTransformerMagician model.\n",
    "\n",
    "        Args:\n",
    "            num_classes (int): Number of output classes.\n",
    "            pretrained (bool): Whether to use a pre-trained ViT model.\n",
    "        \"\"\"\n",
    "        super(VisionTransformerMagician, self).__init__()\n",
    "        self.vit = vit_b_16(pretrained=pretrained)\n",
    "        # Replace the classification head\n",
    "        self.vit.heads = nn.Linear(self.vit.heads.in_features, num_classes)\n",
    "        \n",
    "        # Initialize weights of the new head\n",
    "        initialize_weights(self.vit.heads)\n",
    "        logging.info(\"Initialized VisionTransformerMagician model with ViT backbone.\")\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the VisionTransformerMagician model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, 3, 224, 224).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, num_classes).\n",
    "        \"\"\"\n",
    "        return self.vit(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7a359d1-f4bb-45f1-87d1-ea438b3b13a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/dnn_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import logging\n",
    "\n",
    "class DNNMagician(nn.Module):\n",
    "    def __init__(self, input_size, hidden_sizes, dropout_rate=0.5, num_classes=10):\n",
    "        \"\"\"\n",
    "        Initializes the DNNMagician model.\n",
    "\n",
    "        Args:\n",
    "            input_size (int): Number of input features.\n",
    "            hidden_sizes (list): List containing the number of neurons in each hidden layer.\n",
    "            dropout_rate (float): Dropout rate for regularization.\n",
    "            num_classes (int): Number of output classes.\n",
    "        \"\"\"\n",
    "        super(DNNMagician, self).__init__()\n",
    "        layers = []\n",
    "        prev_size = input_size\n",
    "        for idx, hidden_size in enumerate(hidden_sizes):\n",
    "            layers.append(nn.Linear(prev_size, hidden_size))\n",
    "            layers.append(nn.ReLU())\n",
    "            layers.append(nn.Dropout(dropout_rate))\n",
    "            prev_size = hidden_size\n",
    "        layers.append(nn.Linear(prev_size, num_classes))\n",
    "        self.network = nn.Sequential(*layers)\n",
    "        \n",
    "        # Initialize weights\n",
    "        initialize_weights(self)\n",
    "        logging.info(\"Initialized DNNMagician model with layers: {}\".format(self.network))\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, input_size).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, num_classes).\n",
    "        \"\"\"\n",
    "        return self.network(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f959310c-9353-4207-9438-2b143ed4eacb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/rnn_magician.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import logging\n",
    "\n",
    "class RNNMagician(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size, num_layers, output_size, dropout_rate=0.3):\n",
    "        \"\"\"\n",
    "        Initializes the RNNMagician model.\n",
    "\n",
    "        Args:\n",
    "            input_size (int): Number of input features per time step.\n",
    "            hidden_size (int): Number of features in the hidden state.\n",
    "            num_layers (int): Number of recurrent layers.\n",
    "            output_size (int): Number of output classes.\n",
    "            dropout_rate (float): Dropout rate for regularization.\n",
    "        \"\"\"\n",
    "        super(RNNMagician, self).__init__()\n",
    "        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True, dropout=dropout_rate)\n",
    "        self.fc = nn.Linear(hidden_size, output_size)\n",
    "        \n",
    "        # Initialize weights\n",
    "        initialize_weights(self)\n",
    "        logging.info(\"Initialized RNNMagician model with LSTM layers.\")\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward pass of the RNNMagician model.\n",
    "\n",
    "        Args:\n",
    "            x (torch.Tensor): Input tensor of shape (batch_size, sequence_length, input_size).\n",
    "\n",
    "        Returns:\n",
    "            torch.Tensor: Output predictions of shape (batch_size, output_size).\n",
    "        \"\"\"\n",
    "        out, _ = self.lstm(x)  # out: (batch_size, sequence_length, hidden_size)\n",
    "        out = out[:, -1, :]    # Take the last time step\n",
    "        out = self.fc(out)     # (batch_size, output_size)\n",
    "        return out\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "466ff08d-c912-4a55-a219-868d398cc2ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/logging_setup.py\n",
    "\n",
    "import logging\n",
    "import os\n",
    "\n",
    "def initialize_logging(log_file='logs/training.log', log_level=logging.INFO):\n",
    "    \"\"\"\n",
    "    Initializes the logging configuration.\n",
    "\n",
    "    Args:\n",
    "        log_file (str): Path to the log file.\n",
    "        log_level (int): Logging level (e.g., logging.INFO, logging.DEBUG).\n",
    "    \"\"\"\n",
    "    # Create logs directory if it doesn't exist\n",
    "    os.makedirs(os.path.dirname(log_file), exist_ok=True)\n",
    "    \n",
    "    # Define logging format\n",
    "    log_format = '%(asctime)s [%(levelname)s] %(message)s'\n",
    "    \n",
    "    # Configure logging\n",
    "    logging.basicConfig(\n",
    "        level=log_level,\n",
    "        format=log_format,\n",
    "        handlers=[\n",
    "            logging.FileHandler(log_file),\n",
    "            logging.StreamHandler()\n",
    "        ]\n",
    "    )\n",
    "    \n",
    "    logging.info(\"Logging is initialized.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "232ac365-8bb6-4de4-bea4-1fc6090093ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/redis_manager.py\n",
    "\n",
    "import redis\n",
    "import json\n",
    "import logging\n",
    "\n",
    "class RedisManager:\n",
    "    \"\"\"\n",
    "    Manages connections and interactions with Redis for shared memory.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, host='localhost', port=6379, db=0):\n",
    "        \"\"\"\n",
    "        Initializes the RedisManager by establishing a connection to the Redis server.\n",
    "\n",
    "        Args:\n",
    "            host (str): Redis server hostname.\n",
    "            port (int): Redis server port.\n",
    "            db (int): Redis database index.\n",
    "        \"\"\"\n",
    "        try:\n",
    "            self.redis = redis.Redis(host=host, port=port, db=db)\n",
    "            # Test the connection\n",
    "            self.redis.ping()\n",
    "            logging.info(f\"Connected to Redis at {host}:{port}, DB: {db}\")\n",
    "        except redis.exceptions.ConnectionError as e:\n",
    "            logging.error(f\"Redis connection error: {e}\")\n",
    "            raise e\n",
    "\n",
    "    def set_value(self, key, value):\n",
    "        \"\"\"\n",
    "        Sets a value in Redis after serializing it to JSON.\n",
    "\n",
    "        Args:\n",
    "            key (str): The key under which the value is stored.\n",
    "            value (any): The value to store (must be JSON serializable).\n",
    "        \"\"\"\n",
    "        try:\n",
    "            self.redis.set(key, json.dumps(value))\n",
    "            logging.debug(f\"Set key '{key}' in Redis.\")\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error setting key '{key}' in Redis: {e}\")\n",
    "\n",
    "    def get_value(self, key):\n",
    "        \"\"\"\n",
    "        Retrieves a value from Redis and deserializes it from JSON.\n",
    "\n",
    "        Args:\n",
    "            key (str): The key to retrieve.\n",
    "\n",
    "        Returns:\n",
    "            any: The deserialized value, or None if the key does not exist.\n",
    "        \"\"\"\n",
    "        try:\n",
    "            value = self.redis.get(key)\n",
    "            if value:\n",
    "                logging.debug(f\"Retrieved key '{key}' from Redis.\")\n",
    "                return json.loads(value)\n",
    "            else:\n",
    "                logging.debug(f\"Key '{key}' not found in Redis.\")\n",
    "                return None\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error retrieving key '{key}' from Redis: {e}\")\n",
    "            return None\n",
    "\n",
    "    def delete_key(self, key):\n",
    "        \"\"\"\n",
    "        Deletes a key from Redis.\n",
    "\n",
    "        Args:\n",
    "            key (str): The key to delete.\n",
    "        \"\"\"\n",
    "        try:\n",
    "            self.redis.delete(key)\n",
    "            logging.debug(f\"Deleted key '{key}' from Redis.\")\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error deleting key '{key}' from Redis: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19b0fb45-71d8-4321-9b3e-8abe7fb45eab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/plot_utils.py\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import logging\n",
    "\n",
    "def plot_training_metrics(gui, loss_data, val_loss_data, acc_data, val_acc_data):\n",
    "    \"\"\"\n",
    "    Plots training and validation metrics in the GUI.\n",
    "\n",
    "    Args:\n",
    "        gui (TrainingGUI): Instance of the TrainingGUI.\n",
    "        loss_data (list): List of training loss values.\n",
    "        val_loss_data (list): List of validation loss values.\n",
    "        acc_data (list): List of training accuracy values.\n",
    "        val_acc_data (list): List of validation accuracy values.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        gui.ax.clear()\n",
    "        gui.ax.plot(range(1, len(loss_data)+1), loss_data, label='Training Loss', color='blue')\n",
    "        gui.ax.plot(range(1, len(val_loss_data)+1), val_loss_data, label='Validation Loss', color='orange')\n",
    "        gui.ax.plot(range(1, len(acc_data)+1), acc_data, label='Training Accuracy', color='green')\n",
    "        gui.ax.plot(range(1, len(val_acc_data)+1), val_acc_data, label='Validation Accuracy', color='red')\n",
    "        gui.ax.set_xlabel('Epochs')\n",
    "        gui.ax.set_ylabel('Metrics')\n",
    "        gui.ax.legend()\n",
    "        gui.ax.grid(True)\n",
    "        gui.canvas.draw()\n",
    "        logging.info(\"Updated training metrics plot.\")\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error plotting training metrics: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "426975e7-af4b-4173-a28d-e0efb78b0c2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/weight_initialization.py\n",
    "\n",
    "import torch.nn as nn\n",
    "import logging\n",
    "\n",
    "def initialize_weights(model):\n",
    "    \"\"\"\n",
    "    Initializes weights of the model using Kaiming initialization for Conv layers\n",
    "    and Xavier initialization for Linear layers. BatchNorm layers are initialized\n",
    "    with constant weights and biases.\n",
    "\n",
    "    Args:\n",
    "        model (nn.Module): The model to initialize.\n",
    "    \"\"\"\n",
    "    for m in model.modules():\n",
    "        if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n",
    "            nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
    "            if m.bias is not None:\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "            logging.debug(f\"Initialized Conv layer: {m}\")\n",
    "        elif isinstance(m, nn.Linear):\n",
    "            nn.init.xavier_normal_(m.weight)\n",
    "            if m.bias is not None:\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "            logging.debug(f\"Initialized Linear layer: {m}\")\n",
    "        elif isinstance(m, (nn.BatchNorm1d, nn.BatchNorm2d)):\n",
    "            nn.init.constant_(m.weight, 1)\n",
    "            nn.init.constant_(m.bias, 0)\n",
    "            logging.debug(f\"Initialized BatchNorm layer: {m}\")\n",
    "        elif isinstance(m, nn.LSTM):\n",
    "            for name, param in m.named_parameters():\n",
    "                if 'weight' in name:\n",
    "                    nn.init.xavier_normal_(param.data)\n",
    "                elif 'bias' in name:\n",
    "                    nn.init.constant_(param.data, 0)\n",
    "            logging.debug(f\"Initialized LSTM layer: {m}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "559b24b9-42ab-40b4-a23d-a2dc0c76dc62",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/hyperparameter_tuner.py\n",
    "\n",
    "import logging\n",
    "\n",
    "class HyperparameterTuner:\n",
    "    \"\"\"\n",
    "    Adjusts hyperparameters like learning rate based on training progress.\n",
    "    Implements a simple strategy; can be expanded with reinforcement learning.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, initial_lr, factor=0.5, patience=3, min_lr=1e-6):\n",
    "        \"\"\"\n",
    "        Initializes the HyperparameterTuner.\n",
    "\n",
    "        Args:\n",
    "            initial_lr (float): Initial learning rate.\n",
    "            factor (float): Factor by which to reduce the learning rate.\n",
    "            patience (int): Number of epochs to wait before reducing LR.\n",
    "            min_lr (float): Minimum learning rate.\n",
    "        \"\"\"\n",
    "        self.initial_lr = initial_lr\n",
    "        self.factor = factor\n",
    "        self.patience = patience\n",
    "        self.min_lr = min_lr\n",
    "        self.best_loss = float('inf')\n",
    "        self.counter = 0\n",
    "        logging.info(\"Initialized HyperparameterTuner.\")\n",
    "\n",
    "    def adjust_learning_rate(self, optimizer, current_loss):\n",
    "        \"\"\"\n",
    "        Adjusts the learning rate based on current loss.\n",
    "\n",
    "        Args:\n",
    "            optimizer (torch.optim.Optimizer): Optimizer whose LR is to be adjusted.\n",
    "            current_loss (float): Current validation loss.\n",
    "        \"\"\"\n",
    "        if current_loss < self.best_loss:\n",
    "            self.best_loss = current_loss\n",
    "            self.counter = 0\n",
    "            logging.debug(\"Validation loss improved; resetting patience counter.\")\n",
    "        else:\n",
    "            self.counter += 1\n",
    "            logging.debug(f\"No improvement in validation loss. Counter: {self.counter}/{self.patience}\")\n",
    "            if self.counter >= self.patience:\n",
    "                for param_group in optimizer.param_groups:\n",
    "                    new_lr = max(param_group['lr'] * self.factor, self.min_lr)\n",
    "                    if param_group['lr'] > self.min_lr:\n",
    "                        param_group['lr'] = new_lr\n",
    "                        logging.info(f\"Reducing learning rate to {new_lr}.\")\n",
    "                self.counter = 0  # Reset counter after adjusting\n",
    "\n",
    "    def early_stopping(self):\n",
    "        \"\"\"\n",
    "        Determines whether to perform early stopping.\n",
    "\n",
    "        Returns:\n",
    "            bool: True if early stopping criteria met, False otherwise.\n",
    "        \"\"\"\n",
    "        # Placeholder for actual early stopping logic\n",
    "        return False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b351e9ab-e843-4e1d-9d14-428e4b960250",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/hyperparameter_helper.py\n",
    "\n",
    "import random\n",
    "import logging\n",
    "\n",
    "def randomize_params():\n",
    "    \"\"\"\n",
    "    Randomizes hyperparameters for model training.\n",
    "\n",
    "    Returns:\n",
    "        tuple: (num_models, num_epochs, initial_lr, other_params)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        num_models = random.randint(5, 15)  # Example range\n",
    "        num_epochs = random.randint(50, 200)\n",
    "        initial_lr = random.choice([0.1, 0.01, 0.001, 0.0001])\n",
    "        other_params = {}  # Add other hyperparameters as needed\n",
    "        logging.info(f\"Randomized hyperparameters: num_models={num_models}, num_epochs={num_epochs}, initial_lr={initial_lr}\")\n",
    "        return num_models, num_epochs, initial_lr, other_params\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error randomizing parameters: {e}\")\n",
    "        return 10, 100, 0.001, {}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f95c06a-3896-4c21-a825-33b13b04d85f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# gui/training_gui.py\n",
    "\n",
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "import queue\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.pyplot as plt\n",
    "import logging\n",
    "\n",
    "\n",
    "class TrainingGUI:\n",
    "    \"\"\"\n",
    "    A Tkinter-based GUI that displays real-time training progress, including model metrics,\n",
    "    learning rate adjustments, ensemble accuracy, and allows querying the LLM for explanations.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, root, total_models, total_epochs, redis_manager, llm):\n",
    "        \"\"\"\n",
    "        Initializes the TrainingGUI.\n",
    "\n",
    "        Args:\n",
    "            root (tk.Tk): The root Tkinter window.\n",
    "            total_models (int): Total number of models to train.\n",
    "            total_epochs (int): Total number of epochs per model.\n",
    "            redis_manager (RedisManager): Instance for interacting with Redis.\n",
    "            llm (StrategyLLM): Instance of the language model for generating explanations.\n",
    "        \"\"\"\n",
    "        self.root = root\n",
    "        self.queue = queue.Queue()\n",
    "        self.redis_manager = redis_manager\n",
    "        self.llm = llm\n",
    "        self.root.title(\"Model Training Progress Tracker\")\n",
    "\n",
    "        # Initialize GUI Components\n",
    "        self._init_labels(total_models, total_epochs)\n",
    "        self._init_progress_bar()\n",
    "        self._init_plots()\n",
    "        self._init_ensemble_accuracy()\n",
    "        self._init_query_section()\n",
    "\n",
    "        # Start real-time queue processing\n",
    "        self.root.after(100, self.process_queue)\n",
    "\n",
    "    def _init_labels(self, total_models, total_epochs):\n",
    "        \"\"\"Initialize the labels to display real-time metrics.\"\"\"\n",
    "        self.model_label = tk.Label(self.root, text=f\"Training Model: 0/{total_models}\", font=(\"Helvetica\", 14))\n",
    "        self.model_label.pack(pady=5)\n",
    "\n",
    "        self.epoch_label = tk.Label(self.root, text=f\"Epoch: 0/{total_epochs}\", font=(\"Helvetica\", 14))\n",
    "        self.epoch_label.pack(pady=5)\n",
    "\n",
    "        self.loss_label = tk.Label(self.root, text=\"Loss: 0.0000\", font=(\"Helvetica\", 12))\n",
    "        self.loss_label.pack(pady=2)\n",
    "\n",
    "        self.accuracy_label = tk.Label(self.root, text=\"Accuracy: 0.0000\", font=(\"Helvetica\", 12))\n",
    "        self.accuracy_label.pack(pady=2)\n",
    "\n",
    "        self.val_loss_label = tk.Label(self.root, text=\"Validation Loss: 0.0000\", font=(\"Helvetica\", 12))\n",
    "        self.val_loss_label.pack(pady=2)\n",
    "\n",
    "        self.val_accuracy_label = tk.Label(self.root, text=\"Validation Accuracy: 0.0000\", font=(\"Helvetica\", 12))\n",
    "        self.val_accuracy_label.pack(pady=2)\n",
    "\n",
    "        self.lr_label = tk.Label(self.root, text=\"Learning Rate: 0.000000\", font=(\"Helvetica\", 12))\n",
    "        self.lr_label.pack(pady=2)\n",
    "\n",
    "    def _init_progress_bar(self):\n",
    "        \"\"\"Initialize the progress bar.\"\"\"\n",
    "        self.progress_bar = ttk.Progressbar(self.root, orient=\"horizontal\", length=400, mode=\"determinate\")\n",
    "        self.progress_bar.pack(pady=10)\n",
    "\n",
    "    def _init_plots(self):\n",
    "        \"\"\"Initialize the real-time plots.\"\"\"\n",
    "        self.fig, self.ax = plt.subplots(figsize=(6, 4))\n",
    "        self.line_loss, = self.ax.plot([], [], label='Training Loss', color='blue')\n",
    "        self.line_val_loss, = self.ax.plot([], [], label='Validation Loss', color='orange')\n",
    "        self.line_acc, = self.ax.plot([], [], label='Training Accuracy', color='green')\n",
    "        self.line_val_acc, = self.ax.plot([], [], label='Validation Accuracy', color='red')\n",
    "\n",
    "        self.ax.set_xlabel('Epochs')\n",
    "        self.ax.set_ylabel('Metrics')\n",
    "        self.ax.legend()\n",
    "        self.ax.grid(True)\n",
    "\n",
    "        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)\n",
    "        self.canvas.draw()\n",
    "        self.canvas.get_tk_widget().pack()\n",
    "\n",
    "        # Data storage for plotting\n",
    "        self.loss_data = []\n",
    "        self.val_loss_data = []\n",
    "        self.acc_data = []\n",
    "        self.val_acc_data = []\n",
    "\n",
    "    def _init_ensemble_accuracy(self):\n",
    "        \"\"\"Initialize the ensemble accuracy display.\"\"\"\n",
    "        self.ensemble_label = tk.Label(self.root, text=\"Ensemble Accuracy: N/A\", font=(\"Helvetica\", 14))\n",
    "        self.ensemble_label.pack(pady=5)\n",
    "\n",
    "    def _init_query_section(self):\n",
    "        \"\"\"Initialize the section for querying the LLM for explanations.\"\"\"\n",
    "        self.query_frame = tk.Frame(self.root)\n",
    "        self.query_frame.pack(pady=10)\n",
    "\n",
    "        self.query_label = tk.Label(self.query_frame, text=\"LLM Query:\", font=(\"Helvetica\", 12))\n",
    "        self.query_label.pack(side=tk.LEFT, padx=5)\n",
    "\n",
    "        self.query_entry = tk.Entry(self.query_frame, width=50)\n",
    "        self.query_entry.pack(side=tk.LEFT, padx=5)\n",
    "\n",
    "        self.query_button = tk.Button(self.query_frame, text=\"Ask\", command=self.handle_query)\n",
    "        self.query_button.pack(side=tk.LEFT, padx=5)\n",
    "\n",
    "        self.response_text = tk.Text(self.root, height=10, width=80, state='disabled')\n",
    "        self.response_text.pack(pady=5)\n",
    "\n",
    "    def process_queue(self):\n",
    "        \"\"\"Process the queue for thread-safe GUI updates.\"\"\"\n",
    "        while not self.queue.empty():\n",
    "            message = self.queue.get()\n",
    "            if isinstance(message, dict):\n",
    "                self._handle_message(message)\n",
    "        self.root.after(100, self.process_queue)  # Schedule next update\n",
    "\n",
    "    def _handle_message(self, message):\n",
    "        \"\"\"Handle incoming messages from the queue.\"\"\"\n",
    "        msg_type = message.get('type')\n",
    "        if msg_type == 'epoch':\n",
    "            self.update_epoch(message)\n",
    "        elif msg_type == 'ensemble_accuracy':\n",
    "            self.update_ensemble_accuracy(message.get('accuracy'))\n",
    "        elif msg_type == 'training_completed':\n",
    "            self.model_label.config(text=\"Training Completed\")\n",
    "            messagebox.showinfo(\"Training Completed\", \"All models have been trained successfully!\")\n",
    "\n",
    "    def update_epoch(self, data):\n",
    "        \"\"\"Update the GUI with epoch metrics.\"\"\"\n",
    "        self._update_labels(data)\n",
    "        self._update_progress_bar(data['epoch'], data['total_epochs'])\n",
    "        self._update_plots(data)\n",
    "\n",
    "    def update_ensemble_accuracy(self, accuracy):\n",
    "        \"\"\"Update the ensemble accuracy label.\"\"\"\n",
    "        self.ensemble_label.config(text=f\"Ensemble Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "    def _update_labels(self, data):\n",
    "        \"\"\"Update the labels with new data.\"\"\"\n",
    "        self.model_label.config(text=f\"Training Model: {data['model_num']}/{data['total_models']}\")\n",
    "        self.epoch_label.config(text=f\"Epoch: {data['epoch']}/{data['total_epochs']}\")\n",
    "        self.loss_label.config(text=f\"Loss: {data['loss']:.4f}\")\n",
    "        self.accuracy_label.config(text=f\"Accuracy: {data['accuracy']:.4f}\")\n",
    "        self.val_loss_label.config(text=f\"Validation Loss: {data['val_loss']:.4f}\")\n",
    "        self.val_accuracy_label.config(text=f\"Validation Accuracy: {data['val_accuracy']:.4f}\")\n",
    "        self.lr_label.config(text=f\"Learning Rate: {data['lr']:.6f}\")\n",
    "\n",
    "    def _update_progress_bar(self, epoch, total_epochs):\n",
    "        \"\"\"Update the progress bar.\"\"\"\n",
    "        self.progress_bar[\"value\"] = (epoch / total_epochs) * 100\n",
    "        self.root.update_idletasks()\n",
    "\n",
    "    def _update_plots(self, data):\n",
    "        \"\"\"Update the real-time plots with new metrics.\"\"\"\n",
    "        self.loss_data.append(data['loss'])\n",
    "        self.val_loss_data.append(data['val_loss'])\n",
    "        self.acc_data.append(data['accuracy'])\n",
    "        self.val_acc_data.append(data['val_accuracy'])\n",
    "\n",
    "        self.ax.clear()\n",
    "        self.ax.plot(range(1, len(self.loss_data)+1), self.loss_data, label='Training Loss', color='blue')\n",
    "        self.ax.plot(range(1, len(self.val_loss_data)+1), self.val_loss_data, label='Validation Loss', color='orange')\n",
    "        self.ax.plot(range(1, len(self.acc_data)+1), self.acc_data, label='Training Accuracy', color='green')\n",
    "        self.ax.plot(range(1, len(self.val_acc_data)+1), self.val_acc_data, label='Validation Accuracy', color='red')\n",
    "        self.ax.set_xlabel('Epochs')\n",
    "        self.ax.set_ylabel('Metrics')\n",
    "        self.ax.legend()\n",
    "        self.ax.grid(True)\n",
    "        self.canvas.draw()\n",
    "\n",
    "    def handle_query(self):\n",
    "        \"\"\"Handle user queries to the LLM.\"\"\"\n",
    "        query = self.query_entry.get()\n",
    "        if not query:\n",
    "            messagebox.showwarning(\"Input Needed\", \"Please enter a query.\")\n",
    "            return\n",
    "\n",
    "        # Retrieve current metrics from Redis\n",
    "        current_metrics = self.redis_manager.get_value('current_metrics')\n",
    "        if not current_metrics:\n",
    "            messagebox.showwarning(\"No Data\", \"No current metrics available for explanation.\")\n",
    "            return\n",
    "\n",
    "        # Generate explanation using LLM\n",
    "        explanation = self.llm.explain_prediction(\n",
    "            model_num=current_metrics.get('model_num', 0),\n",
    "            epoch=current_metrics.get('epoch', 0),\n",
    "            input_data=None,       # Optionally, pass actual input data if available\n",
    "            prediction=None,      # Optionally, pass actual prediction if available\n",
    "            actual_label=None     # Optionally, pass actual label if available\n",
    "        )\n",
    "\n",
    "        # Display the explanation\n",
    "        response = f\"Query: {query}\\nExplanation: {explanation}\\n\"\n",
    "        self.response_text.config(state='normal')\n",
    "        self.response_text.insert(tk.END, response + \"\\n\")\n",
    "        self.response_text.config(state='disabled')\n",
    "        self.query_entry.delete(0, tk.END)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81d98d04-aa25-4ec5-b8e1-577144026e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training/trainer.py\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.optim import lr_scheduler\n",
    "from torch.utils.data import DataLoader\n",
    "import logging\n",
    "from queue import Queue\n",
    "import threading\n",
    "import time\n",
    "import joblib\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, log_loss\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Ensure all models are imported in models/__init__.py for easy access\n",
    "\n",
    "class Trainer:\n",
    "    \"\"\"\n",
    "    Manages the training process for multiple models, interacts with the GUI,\n",
    "    handles hyperparameter tuning, evaluates models, and creates an ensemble.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, \n",
    "                 train_loader: DataLoader, \n",
    "                 eval_loader: DataLoader, \n",
    "                 total_models: int, \n",
    "                 total_epochs: int, \n",
    "                 initial_lr: float, \n",
    "                 device: torch.device,\n",
    "                 redis_manager: RedisManager,\n",
    "                 llm: StrategyLLM,\n",
    "                 gui: TrainingGUI):\n",
    "        \"\"\"\n",
    "        Initializes the Trainer with necessary components.\n",
    "\n",
    "        Args:\n",
    "            train_loader (DataLoader): DataLoader for training data.\n",
    "            eval_loader (DataLoader): DataLoader for evaluation data.\n",
    "            total_models (int): Total number of models to train.\n",
    "            total_epochs (int): Number of epochs per model.\n",
    "            initial_lr (float): Initial learning rate.\n",
    "            device (torch.device): Device to perform training on.\n",
    "            redis_manager (RedisManager): Instance for interacting with Redis.\n",
    "            llm (StrategyLLM): Instance of the language model for explanations.\n",
    "            gui (TrainingGUI): Instance of the GUI for updates.\n",
    "        \"\"\"\n",
    "        self.train_loader = train_loader\n",
    "        self.eval_loader = eval_loader\n",
    "        self.total_models = total_models\n",
    "        self.total_epochs = total_epochs\n",
    "        self.initial_lr = initial_lr\n",
    "        self.device = device\n",
    "        self.redis_manager = redis_manager\n",
    "        self.llm = llm\n",
    "        self.gui = gui\n",
    "        self.models = []\n",
    "        self.ensemble_model = None\n",
    "        self.scaler = None\n",
    "        self.tuner = HyperparameterTuner(initial_lr=initial_lr)\n",
    "        self.lock = threading.Lock()  # To manage access to shared resources\n",
    "\n",
    "    def get_model(self, model_num: int):\n",
    "        \"\"\"\n",
    "        Dynamically initializes a model based on the model number.\n",
    "\n",
    "        Args:\n",
    "            model_num (int): The current model number.\n",
    "\n",
    "        Returns:\n",
    "            nn.Module: An instance of the selected model.\n",
    "        \"\"\"\n",
    "        # Example strategy: cycle through different model architectures\n",
    "        architectures = [\n",
    "            MLPMagician,\n",
    "            CNNMagician,\n",
    "            ResNetMagician,\n",
    "            VisionTransformerMagician,\n",
    "            DNNMagician,\n",
    "            RNNMagician\n",
    "        ]\n",
    "        architecture = architectures[model_num % len(architectures)]\n",
    "        \n",
    "        if architecture == MLPMagician:\n",
    "            model = MLPMagician(input_size=784, hidden_sizes=[256, 128, 64], dropout_rate=0.5)\n",
    "        elif architecture == CNNMagician:\n",
    "            model = CNNMagician(dropout_rate=0.5, num_classes=10)\n",
    "        elif architecture == ResNetMagician:\n",
    "            model = ResNetMagician(num_classes=10)\n",
    "        elif architecture == VisionTransformerMagician:\n",
    "            model = VisionTransformerMagician(num_classes=10, pretrained=True)\n",
    "        elif architecture == DNNMagician:\n",
    "            model = DNNMagician(input_size=784, hidden_sizes=[512, 256, 128], dropout_rate=0.5)\n",
    "        elif architecture == RNNMagician:\n",
    "            model = RNNMagician(input_size=10, hidden_size=50, num_layers=2, output_size=10, dropout_rate=0.3)\n",
    "        else:\n",
    "            raise ValueError(f\"Unsupported architecture: {architecture}\")\n",
    "        \n",
    "        model.to(self.device)\n",
    "        logging.info(f\"Initialized {architecture.__name__} for Model {model_num}.\")\n",
    "        return model\n",
    "\n",
    "    def train(self):\n",
    "        \"\"\"\n",
    "        Starts the training process in a separate thread to keep the GUI responsive.\n",
    "        \"\"\"\n",
    "        training_thread = threading.Thread(target=self._training_loop, daemon=True)\n",
    "        training_thread.start()\n",
    "\n",
    "    def _training_loop(self):\n",
    "        \"\"\"\n",
    "        The main training loop that iterates over the number of models and epochs.\n",
    "        \"\"\"\n",
    "        for model_num in range(1, self.total_models + 1):\n",
    "            try:\n",
    "                model = self.get_model(model_num)\n",
    "                self.models.append(model)\n",
    "                optimizer = optim.AdamW(model.parameters(), lr=self.initial_lr, weight_decay=1e-4)\n",
    "                scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n",
    "                criterion = nn.CrossEntropyLoss(label_smoothing=0.1)\n",
    "                scaler = torch.cuda.amp.GradScaler() if self.device.type == 'cuda' else None\n",
    "\n",
    "                best_val_loss = float('inf')\n",
    "                best_val_accuracy = 0.0\n",
    "\n",
    "                for epoch in range(1, self.total_epochs + 1):\n",
    "                    model.train()\n",
    "                    running_loss = 0.0\n",
    "                    correct = 0\n",
    "                    total = 0\n",
    "\n",
    "                    for batch_idx, (inputs, labels) in enumerate(self.train_loader):\n",
    "                        inputs, labels = inputs.to(self.device), labels.to(self.device)\n",
    "                        \n",
    "                        optimizer.zero_grad()\n",
    "                        \n",
    "                        with torch.cuda.amp.autocast(enabled=self.device.type == 'cuda'):\n",
    "                            outputs = model(inputs)\n",
    "                            loss = criterion(outputs, labels)\n",
    "                        \n",
    "                        if scaler:\n",
    "                            scaler.scale(loss).backward()\n",
    "                            scaler.step(optimizer)\n",
    "                            scaler.update()\n",
    "                        else:\n",
    "                            loss.backward()\n",
    "                            optimizer.step()\n",
    "                        \n",
    "                        running_loss += loss.item() * inputs.size(0)\n",
    "                        _, predicted = torch.max(outputs.data, 1)\n",
    "                        total += labels.size(0)\n",
    "                        correct += (predicted == labels).sum().item()\n",
    "                    \n",
    "                    epoch_loss = running_loss / len(self.train_loader.dataset)\n",
    "                    epoch_acc = correct / total\n",
    "\n",
    "                    val_loss, val_acc = self.evaluate(model, criterion)\n",
    "\n",
    "                    scheduler.step(val_loss)\n",
    "                    self.tuner.adjust_learning_rate(optimizer, val_loss)\n",
    "\n",
    "                    # Update Redis with current metrics\n",
    "                    current_metrics = {\n",
    "                        'model_num': model_num,\n",
    "                        'epoch': epoch,\n",
    "                        'total_models': self.total_models,\n",
    "                        'total_epochs': self.total_epochs,\n",
    "                        'loss': epoch_loss,\n",
    "                        'accuracy': epoch_acc,\n",
    "                        'val_loss': val_loss,\n",
    "                        'val_accuracy': val_acc,\n",
    "                        'lr': optimizer.param_groups[0]['lr']\n",
    "                    }\n",
    "                    self.redis_manager.set_value('current_metrics', current_metrics)\n",
    "\n",
    "                    # Send update to GUI\n",
    "                    self.gui.queue.put({\n",
    "                        'type': 'epoch',\n",
    "                        'model_num': model_num,\n",
    "                        'total_models': self.total_models,\n",
    "                        'epoch': epoch,\n",
    "                        'total_epochs': self.total_epochs,\n",
    "                        'loss': epoch_loss,\n",
    "                        'accuracy': epoch_acc,\n",
    "                        'val_loss': val_loss,\n",
    "                        'val_accuracy': val_acc,\n",
    "                        'lr': optimizer.param_groups[0]['lr']\n",
    "                    })\n",
    "\n",
    "                    logging.info(f\"Model {model_num}, Epoch {epoch}/{self.total_epochs} - \"\n",
    "                                 f\"Loss: {epoch_loss:.4f}, Accuracy: {epoch_acc:.4f}, \"\n",
    "                                 f\"Val Loss: {val_loss:.4f}, Val Accuracy: {val_acc:.4f}, \"\n",
    "                                 f\"LR: {optimizer.param_groups[0]['lr']:.6f}\")\n",
    "\n",
    "                # Save model checkpoint\n",
    "                checkpoint_path = f'models/model_{model_num}.pth'\n",
    "                torch.save(model.state_dict(), checkpoint_path)\n",
    "                logging.info(f\"Saved Model {model_num} at '{checkpoint_path}'.\")\n",
    "\n",
    "            except Exception as e:\n",
    "                logging.error(f\"Error training Model {model_num}: {e}\")\n",
    "                continue\n",
    "\n",
    "        # After training all models, create an ensemble\n",
    "        self.create_ensemble()\n",
    "\n",
    "        # Notify GUI that training is completed\n",
    "        self.gui.queue.put({'type': 'training_completed'})\n",
    "\n",
    "    def evaluate(self, model: nn.Module, criterion: nn.Module):\n",
    "        \"\"\"\n",
    "        Evaluates the model on the validation dataset.\n",
    "\n",
    "        Args:\n",
    "            model (nn.Module): The trained model.\n",
    "            criterion (nn.Module): The loss function.\n",
    "\n",
    "        Returns:\n",
    "            tuple: (validation_loss, validation_accuracy)\n",
    "        \"\"\"\n",
    "        model.eval()\n",
    "        val_loss = 0.0\n",
    "        correct = 0\n",
    "        total = 0\n",
    "\n",
    "        with torch.no_grad():\n",
    "            for inputs, labels in self.eval_loader:\n",
    "                inputs, labels = inputs.to(self.device), labels.to(self.device)\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "                val_loss += loss.item() * inputs.size(0)\n",
    "                _, predicted = torch.max(outputs.data, 1)\n",
    "                total += labels.size(0)\n",
    "                correct += (predicted == labels).sum().item()\n",
    "\n",
    "        avg_val_loss = val_loss / len(self.eval_loader.dataset)\n",
    "        val_accuracy = correct / total\n",
    "\n",
    "        logging.info(f\"Validation - Loss: {avg_val_loss:.4f}, Accuracy: {val_accuracy:.4f}\")\n",
    "\n",
    "        return avg_val_loss, val_accuracy\n",
    "\n",
    "    def create_ensemble(self):\n",
    "        \"\"\"\n",
    "        Creates an ensemble model using a Random Forest classifier based on the trained models' outputs.\n",
    "        \"\"\"\n",
    "        try:\n",
    "            # Collect features and labels from training data\n",
    "            all_features = []\n",
    "            all_labels = []\n",
    "            for model in self.models:\n",
    "                model.eval()\n",
    "                features = []\n",
    "                labels = []\n",
    "                with torch.no_grad():\n",
    "                    for inputs, lbls in self.train_loader:\n",
    "                        inputs = inputs.to(self.device)\n",
    "                        outputs = model(inputs)\n",
    "                        features.append(outputs.cpu().numpy())\n",
    "                        labels.append(lbls.numpy())\n",
    "                all_features.append(np.vstack(features))\n",
    "                all_labels.append(np.hstack(labels))\n",
    "            \n",
    "            # Concatenate features from all models\n",
    "            combined_features = np.hstack(all_features)\n",
    "            combined_labels = all_labels[0]  # Assuming all models have the same labels\n",
    "\n",
    "            # Scale features\n",
    "            scaler = StandardScaler()\n",
    "            scaled_features = scaler.fit_transform(combined_features)\n",
    "\n",
    "            # Train Random Forest ensemble\n",
    "            rf = RandomForestClassifier(n_estimators=300, max_depth=12, random_state=42, n_jobs=-1)\n",
    "            rf.fit(scaled_features, combined_labels)\n",
    "            self.ensemble_model = rf\n",
    "            self.scaler = scaler\n",
    "\n",
    "            # Save ensemble model\n",
    "            ensemble_path = 'ensemble_random_forest.pkl'\n",
    "            joblib.dump((rf, scaler), ensemble_path)\n",
    "            logging.info(f\"Saved ensemble model at '{ensemble_path}'.\")\n",
    "\n",
    "            # Evaluate ensemble on validation data\n",
    "            val_loss, val_accuracy = self.evaluate_ensemble()\n",
    "            self.gui.queue.put({'type': 'ensemble_accuracy', 'accuracy': val_accuracy})\n",
    "\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error creating ensemble: {e}\")\n",
    "\n",
    "    def evaluate_ensemble(self):\n",
    "        \"\"\"\n",
    "        Evaluates the ensemble model on the validation dataset.\n",
    "\n",
    "        Returns:\n",
    "            tuple: (validation_loss, validation_accuracy)\n",
    "        \"\"\"\n",
    "        if not self.ensemble_model or not self.scaler:\n",
    "            logging.error(\"Ensemble model or scaler not found.\")\n",
    "            return float('inf'), 0.0\n",
    "\n",
    "        all_features = []\n",
    "        all_labels = []\n",
    "        for model in self.models:\n",
    "            model.eval()\n",
    "            features = []\n",
    "            labels = []\n",
    "            with torch.no_grad():\n",
    "                for inputs, lbls in self.eval_loader:\n",
    "                    inputs = inputs.to(self.device)\n",
    "                    outputs = model(inputs)\n",
    "                    features.append(outputs.cpu().numpy())\n",
    "                    labels.append(lbls.numpy())\n",
    "            all_features.append(np.vstack(features))\n",
    "            all_labels.append(np.hstack(labels))\n",
    "        \n",
    "        # Concatenate features from all models\n",
    "        combined_features = np.hstack(all_features)\n",
    "        combined_labels = all_labels[0]  # Assuming all models have the same labels\n",
    "\n",
    "        # Scale features\n",
    "        scaled_features = self.scaler.transform(combined_features)\n",
    "\n",
    "        # Predict with Random Forest\n",
    "        predictions = self.ensemble_model.predict(scaled_features)\n",
    "        prediction_probs = self.ensemble_model.predict_proba(scaled_features)\n",
    "\n",
    "        # Calculate metrics\n",
    "        accuracy = accuracy_score(combined_labels, predictions)\n",
    "        loss = log_loss(combined_labels, prediction_probs)\n",
    "\n",
    "        logging.info(f\"Ensemble Validation - Loss: {loss:.4f}, Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "        return loss, accuracy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99658f43-b76a-4ad0-8459-562f1fa18625",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "daa64048-7f54-44c3-be45-7e91a9d20a0b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdc50195-64a5-4b1f-a242-0d19ad1c09f3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97390b85-1d9c-4fbb-877c-939041c53a0f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad0cf8ba-2c92-464e-86a0-2209204239da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ae0d674-53b0-43b1-a901-19947b7f6fbb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfea14bd-9fc2-471d-b757-6ae0c68784b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "381cc436-36ed-49d7-a9c7-088923cdb43b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61ee0ebb-df77-47ee-ba4d-7e852d8c3d86",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1b8b113-59e3-431b-a1d1-32335c7a6aa2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06ac47e2-d7bb-4ad1-b7fd-0590a7d250ff",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54b3d482-e576-4a00-997a-340209d39021",
   "metadata": {},
   "outputs": [],
   "source": [
    "# utils/__init__.py\n",
    "\n",
    "from .logging_setup import initialize_logging\n",
    "from .redis_manager import RedisManager\n",
    "from .plot_utils import plot_training_metrics\n",
    "from .weight_initialization import initialize_weights\n",
    "from .hyperparameter_tuner import HyperparameterTuner\n",
    "from .hyperparameter_helper import randomize_params\n",
    "\n",
    "__all__ = [\n",
    "    'initialize_logging',\n",
    "    'RedisManager',\n",
    "    'plot_training_metrics',\n",
    "    'initialize_weights',\n",
    "    'HyperparameterTuner',\n",
    "    'randomize_params'\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f09c32c6-74aa-49c8-8e04-e65ca46befca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/__init__.py\n",
    "\n",
    "from .mlp_magician import MLPMagician\n",
    "from .cnn_magician import CNNMagician\n",
    "from .resnet_magician import ResNetMagician\n",
    "from .vision_transformer_magician import VisionTransformerMagician\n",
    "from .dnn_magician import DNNMagician\n",
    "from .rnn_magician import RNNMagician\n",
    "\n",
    "__all__ = [\n",
    "    'MLPMagician',\n",
    "    'CNNMagician',\n",
    "    'ResNetMagician',\n",
    "    'VisionTransformerMagician',\n",
    "    'DNNMagician',\n",
    "    'RNNMagician'\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36d86660-756b-4afc-b396-9d11efe8099d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# main.py\n",
    "\n",
    "import tkinter as tk\n",
    "from utils.logging_setup import initialize_logging\n",
    "from utils.redis_manager import RedisManager\n",
    "from utils.strategy_llm import StrategyLLM\n",
    "from gui.training_gui import TrainingGUI\n",
    "from data.data_loader import load_arc_data, prepare_training_data, prepare_evaluation_data\n",
    "from training.trainer import Trainer\n",
    "from utils.hyperparameter_helper import randomize_params\n",
    "import torch\n",
    "\n",
    "def main():\n",
    "    # Initialize logging\n",
    "    initialize_logging()\n",
    "\n",
    "    # Initialize Redis Manager\n",
    "    redis_manager = RedisManager(host='localhost', port=6379, db=0)\n",
    "\n",
    "    # Initialize Strategy LLM\n",
    "    llm = StrategyLLM(model_name='gpt2')  # Adjust model name as needed\n",
    "\n",
    "    # Load ARC data\n",
    "    arc_data = load_arc_data()\n",
    "    if arc_data is None:\n",
    "        print(\"Failed to load ARC data.\")\n",
    "        return\n",
    "\n",
    "    # Prepare data loaders\n",
    "    train_loader = prepare_training_data(\n",
    "        arc_data=arc_data, \n",
    "        batch_size=32, \n",
    "        shuffle=True, \n",
    "        augment=True, \n",
    "        seed_manager=None  # Initialize SeedManager if needed\n",
    "    )\n",
    "    eval_loader = prepare_evaluation_data(\n",
    "        arc_data=arc_data, \n",
    "        batch_size=32, \n",
    "        shuffle=False\n",
    "    )\n",
    "\n",
    "    # Randomize hyperparameters\n",
    "    num_models, num_epochs, initial_lr, _ = randomize_params()\n",
    "\n",
    "    # Determine device\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    print(f\"Using device: {device}\")\n",
    "\n",
    "    # Initialize GUI\n",
    "    root = tk.Tk()\n",
    "    gui = TrainingGUI(\n",
    "        root=root, \n",
    "        total_models=num_models, \n",
    "        total_epochs=num_epochs, \n",
    "        redis_manager=redis_manager, \n",
    "        llm=llm\n",
    "    )\n",
    "\n",
    "    # Initialize Trainer\n",
    "    trainer = Trainer(\n",
    "        train_loader=train_loader,\n",
    "        eval_loader=eval_loader,\n",
    "        total_models=num_models,\n",
    "        total_epochs=num_epochs,\n",
    "        initial_lr=initial_lr,\n",
    "        device=device,\n",
    "        redis_manager=redis_manager,\n",
    "        llm=llm,\n",
    "        gui=gui\n",
    "    )\n",
    "\n",
    "    # Start training\n",
    "    trainer.train()\n",
    "\n",
    "    # Start the Tkinter main loop\n",
    "    root.mainloop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a645f15-66f0-4ffa-a7f0-d593ea3cd1b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "class CNNGridExtractor(nn.Module):\n",
    "    \"\"\"Extract spatial features from grid patterns using CNN.\"\"\"\n",
    "    def __init__(self):\n",
    "        super(CNNGridExtractor, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.fc = nn.Linear(64 * 15 * 15, 256)  # Adjust for 30x30 grid\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.pool(self.conv1(x)))\n",
    "        x = F.relu(self.pool(self.conv2(x)))\n",
    "        x = x.view(x.size(0), -1)  # Flatten\n",
    "        features = F.relu(self.fc(x))\n",
    "        return features\n",
    "\n",
    "class RNNLearner(nn.Module):\n",
    "    \"\"\"Learns temporal dependencies across iterations.\"\"\"\n",
    "    def __init__(self, input_size=256, hidden_size=128, num_layers=2):\n",
    "        super(RNNLearner, self).__init__()\n",
    "        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)\n",
    "        self.fc = nn.Linear(hidden_size, 64)\n",
    "\n",
    "    def forward(self, x, hidden_state):\n",
    "        out, hidden_state = self.lstm(x, hidden_state)\n",
    "        output = self.fc(out[:, -1, :])  # Use last hidden state output\n",
    "        return output, hidden_state\n",
    "\n",
    "class HybridGridNetwork(nn.Module):\n",
    "    \"\"\"Combines CNN and RNN to learn grid-based patterns.\"\"\"\n",
    "    def __init__(self):\n",
    "        super(HybridGridNetwork, self).__init__()\n",
    "        self.cnn = CNNGridExtractor()\n",
    "        self.rnn = RNNLearner()\n",
    "        self.fc = nn.Linear(64, 10)  # Example output layer (10 classes)\n",
    "\n",
    "    def forward(self, x, hidden_state):\n",
    "        features = self.cnn(x)\n",
    "        features = features.unsqueeze(1)  # Add batch dimension for LSTM\n",
    "        rnn_output, hidden_state = self.rnn(features, hidden_state)\n",
    "        output = self.fc(rnn_output)\n",
    "        return output, hidden_state\n",
    "\n",
    "def initialize_hidden(batch_size, hidden_size=128, num_layers=2):\n",
    "    \"\"\"Initialize LSTM hidden state.\"\"\"\n",
    "    return (\n",
    "        torch.zeros(num_layers, batch_size, hidden_size).to(device),\n",
    "        torch.zeros(num_layers, batch_size, hidden_size).to(device)\n",
    "    )\n",
    "\n",
    "def preprocess_grid(grid):\n",
    "    \"\"\"Convert grid to tensor and normalize it.\"\"\"\n",
    "    grid_tensor = torch.tensor(grid, dtype=torch.float32).unsqueeze(0)  # Add channel dimension\n",
    "    return grid_tensor / 10.0  # Normalize values\n",
    "\n",
    "def compute_reward(predicted, target):\n",
    "    \"\"\"Compute reward based on MSE difference.\"\"\"\n",
    "    return 1.0 - F.mse_loss(predicted, target).item()\n",
    "\n",
    "def train_hybrid_model(\n",
    "    model, train_loader, eval_loader, num_epochs, optimizer, criterion, device\n",
    "):\n",
    "    \"\"\"Train the hybrid model using reinforcement learning and SGD.\"\"\"\n",
    "    hidden_state = initialize_hidden(train_loader.batch_size)\n",
    "    rewards = []\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss, total_reward = 0, 0\n",
    "\n",
    "        for inputs, targets in train_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            outputs, hidden_state = model(inputs, hidden_state)\n",
    "            loss = criterion(outputs, targets)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            reward = compute_reward(outputs, targets)\n",
    "            total_reward += reward\n",
    "            total_loss += loss.item()\n",
    "\n",
    "        val_loss, val_accuracy = evaluate_model(model, eval_loader, criterion, device)\n",
    "        print(f\"Epoch {epoch+1}, Loss: {total_loss:.4f}, Reward: {total_reward:.4f}, Val Acc: {val_accuracy:.4f}\")\n",
    "\n",
    "    return model\n",
    "\n",
    "def evaluate_model(model, eval_loader, criterion, device):\n",
    "    \"\"\"Evaluate the model on validation data.\"\"\"\n",
    "    model.eval()\n",
    "    total_loss, correct_predictions, total_samples = 0, 0, 0\n",
    "    hidden_state = initialize_hidden(eval_loader.batch_size)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, targets in eval_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            outputs, _ = model(inputs, hidden_state)\n",
    "            loss = criterion(outputs, targets)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            correct_predictions += (predicted == targets).sum().item()\n",
    "            total_samples += targets.size(0)\n",
    "\n",
    "    avg_loss = total_loss / len(eval_loader)\n",
    "    accuracy = correct_predictions / total_samples\n",
    "    return avg_loss, accuracy\n",
    "\n",
    "# Example usage\n",
    "grid_data = np.random.randint(0, 10, (100, 30, 30))  # Generate random grid data\n",
    "grid_labels = np.random.randint(0, 10, (100,))  # Random labels\n",
    "\n",
    "# Prepare DataLoader\n",
    "grids = torch.stack([preprocess_grid(grid) for grid in grid_data])\n",
    "labels = torch.tensor(grid_labels)\n",
    "dataset = TensorDataset(grids, labels)\n",
    "train_loader = DataLoader(dataset, batch_size=8, shuffle=True)\n",
    "eval_loader = DataLoader(dataset, batch_size=8)\n",
    "\n",
    "model = HybridGridNetwork().to(device)\n",
    "optimizer = optim.AdamW(model.parameters(), lr=1e-3)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "\n",
    "# Train the model\n",
    "train_hybrid_model(model, train_loader, eval_loader, num_epochs=500, optimizer=optimizer, criterion=criterion, device=device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdacfb24-5a2d-48db-af6f-62c2b38237a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "import random\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import numpy as np\n",
    "\n",
    "class CNNExtractor(nn.Module):\n",
    "    \"\"\"Extract visual features from image data using CNN.\"\"\"\n",
    "    def __init__(self):\n",
    "        super(CNNExtractor, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.fc = nn.Linear(128 * 15 * 15, 512)  # Assuming 30x30 input size\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.pool(self.conv1(x)))\n",
    "        x = F.relu(self.pool(self.conv2(x)))\n",
    "        x = x.view(x.size(0), -1)  # Flatten\n",
    "        features = F.relu(self.fc(x))\n",
    "        return features\n",
    "\n",
    "class RNNLearner(nn.Module):\n",
    "    \"\"\"Learns long-term dependencies from extracted features.\"\"\"\n",
    "    def __init__(self, input_size=512, hidden_size=256, num_layers=2):\n",
    "        super(RNNLearner, self).__init__()\n",
    "        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)\n",
    "        self.fc = nn.Linear(hidden_size, 128)  # Output for reinforcement learning\n",
    "\n",
    "    def forward(self, x, hidden_state):\n",
    "        out, hidden_state = self.lstm(x, hidden_state)\n",
    "        output = self.fc(out[:, -1, :])  # Use the last hidden state\n",
    "        return output, hidden_state\n",
    "\n",
    "class HybridNetwork(nn.Module):\n",
    "    \"\"\"Combines CNN and RNN for visual data learning.\"\"\"\n",
    "    def __init__(self):\n",
    "        super(HybridNetwork, self).__init__()\n",
    "        self.cnn = CNNExtractor()\n",
    "        self.rnn = RNNLearner()\n",
    "        self.fc = nn.Linear(128, 10)  # Example output layer (10 classes)\n",
    "\n",
    "    def forward(self, x, hidden_state):\n",
    "        features = self.cnn(x)\n",
    "        features = features.unsqueeze(1)  # Add batch dimension for LSTM\n",
    "        rnn_output, hidden_state = self.rnn(features, hidden_state)\n",
    "        output = self.fc(rnn_output)\n",
    "        return output, hidden_state\n",
    "\n",
    "def initialize_hidden(batch_size, hidden_size=256, num_layers=2):\n",
    "    \"\"\"Initialize LSTM hidden state.\"\"\"\n",
    "    return (\n",
    "        torch.zeros(num_layers, batch_size, hidden_size).to(device),\n",
    "        torch.zeros(num_layers, batch_size, hidden_size).to(device)\n",
    "    )\n",
    "\n",
    "def compute_reward(predicted, target):\n",
    "    \"\"\"Compute reward based on accuracy.\"\"\"\n",
    "    return 1.0 - F.mse_loss(predicted, target).item()  # Reward is inverse of MSE\n",
    "\n",
    "def train_hybrid_model(\n",
    "    model, train_loader, eval_loader, num_epochs, optimizer, criterion, device\n",
    "):\n",
    "    \"\"\"Train the hybrid model using reinforcement learning and SGD.\"\"\"\n",
    "    hidden_state = initialize_hidden(train_loader.batch_size)\n",
    "    rewards = []\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss, total_reward = 0, 0\n",
    "\n",
    "        for inputs, targets in train_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # Forward pass\n",
    "            outputs, hidden_state = model(inputs, hidden_state)\n",
    "            loss = criterion(outputs, targets)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            # Compute reward and update long-term memory\n",
    "            reward = compute_reward(outputs, targets)\n",
    "            total_reward += reward\n",
    "\n",
    "            total_loss += loss.item()\n",
    "\n",
    "        # Evaluate on validation set\n",
    "        val_loss, val_accuracy = evaluate_model(model, eval_loader, criterion, device)\n",
    "\n",
    "        print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {total_loss}, Reward: {total_reward}, Val Acc: {val_accuracy}\")\n",
    "\n",
    "    return model\n",
    "\n",
    "def evaluate_model(model, eval_loader, criterion, device):\n",
    "    \"\"\"Evaluate model on validation set.\"\"\"\n",
    "    model.eval()\n",
    "    total_loss, correct_predictions, total_samples = 0, 0, 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        hidden_state = initialize_hidden(eval_loader.batch_size)\n",
    "        for inputs, targets in eval_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            outputs, _ = model(inputs, hidden_state)\n",
    "            loss = criterion(outputs, targets)\n",
    "            total_loss += loss.item()\n",
    "\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            correct_predictions += (predicted == targets).sum().item()\n",
    "            total_samples += targets.size(0)\n",
    "\n",
    "    accuracy = correct_predictions / total_samples\n",
    "    avg_loss = total_loss / len(eval_loader)\n",
    "    return avg_loss, accuracy\n",
    "\n",
    "# Usage example:\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = HybridNetwork().to(device)\n",
    "optimizer = optim.AdamW(model.parameters(), lr=1e-3)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "\n",
    "# Train and evaluate the model\n",
    "num_epochs = 500\n",
    "train_hybrid_model(model, train_loader, eval_loader, num_epochs, optimizer, criterion, device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "899e3340-5f67-43f4-b220-88902cdf81e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data/data_conversion.py\n",
    "\n",
    "import os\n",
    "import random\n",
    "from PIL import Image, ImageDraw, ImageFont\n",
    "import numpy as np\n",
    "import torch\n",
    "from torchvision import transforms\n",
    "import logging\n",
    "\n",
    "# Configure logging for the data_conversion module\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "\n",
    "def grid_to_image(grid, color_map):\n",
    "    \"\"\"\n",
    "    Converts a numerical grid into a colored image based on the provided color map.\n",
    "\n",
    "    Args:\n",
    "        grid (np.ndarray): 2D array representing the grid values.\n",
    "        color_map (dict): Dictionary mapping grid values to RGB colors.\n",
    "\n",
    "    Returns:\n",
    "        PIL.Image: Colored image representation of the grid.\n",
    "    \"\"\"\n",
    "    height, width = grid.shape\n",
    "    img_array = np.zeros((height, width, 3), dtype=np.uint8)\n",
    "\n",
    "    for i in range(height):\n",
    "        for j in range(width):\n",
    "            img_array[i, j] = color_map.get(grid[i, j], [255, 255, 255])  # Default to white\n",
    "\n",
    "    return Image.fromarray(img_array)\n",
    "\n",
    "\n",
    "def grid_to_grayscale(grid):\n",
    "    \"\"\"\n",
    "    Converts a numerical grid into a grayscale image.\n",
    "\n",
    "    Args:\n",
    "        grid (np.ndarray): 2D array representing the grid values.\n",
    "\n",
    "    Returns:\n",
    "        PIL.Image: Grayscale image representation of the grid.\n",
    "    \"\"\"\n",
    "    height, width = grid.shape\n",
    "    # Normalize grid values to 0-255\n",
    "    normalized_grid = (grid - grid.min()) / (grid.max() - grid.min()) * 255\n",
    "    grayscale_array = normalized_grid.astype(np.uint8)\n",
    "    return Image.fromarray(grayscale_array, mode='L')\n",
    "\n",
    "\n",
    "def grid_to_numeric_image(grid, font_path=None, font_size=12):\n",
    "    \"\"\"\n",
    "    Converts a numerical grid into an image with numbers overlaid on a blank background.\n",
    "\n",
    "    Args:\n",
    "        grid (np.ndarray): 2D array representing the grid values.\n",
    "        font_path (str, optional): Path to a .ttf font file. Defaults to None.\n",
    "        font_size (int, optional): Font size for the numbers. Defaults to 12.\n",
    "\n",
    "    Returns:\n",
    "        PIL.Image: Image with numbers overlaid on the grid.\n",
    "    \"\"\"\n",
    "    height, width = grid.shape\n",
    "    cell_size = 50  # Pixels\n",
    "    img_width = width * cell_size\n",
    "    img_height = height * cell_size\n",
    "\n",
    "    image = Image.new('RGB', (img_width, img_height), color='white')\n",
    "    draw = ImageDraw.Draw(image)\n",
    "\n",
    "    # Load a font\n",
    "    if font_path and os.path.exists(font_path):\n",
    "        font = ImageFont.truetype(font_path, font_size)\n",
    "    else:\n",
    "        font = ImageFont.load_default()\n",
    "\n",
    "    for i in range(height):\n",
    "        for j in range(width):\n",
    "            top_left = (j * cell_size, i * cell_size)\n",
    "            bottom_right = ((j + 1) * cell_size, (i + 1) * cell_size)\n",
    "            draw.rectangle([top_left, bottom_right], outline='black', fill='white')\n",
    "\n",
    "            # Overlay the number\n",
    "            number = str(grid[i, j])\n",
    "            text_width, text_height = draw.textsize(number, font=font)\n",
    "            text_x = top_left[0] + (cell_size - text_width) / 2\n",
    "            text_y = top_left[1] + (cell_size - text_height) / 2\n",
    "            draw.text((text_x, text_y), number, fill='black', font=font)\n",
    "\n",
    "    return image\n",
    "\n",
    "\n",
    "# data/data_conversion.py (continued)\n",
    "\n",
    "def augment_image_with_transforms(image, grid, perturb_prob=0.1, dead_square_prob=0.05, noise_prob=0.05):\n",
    "    \"\"\"\n",
    "    Applies random perturbations, dead squares, noise, and additional transformations to the image.\n",
    "\n",
    "    Args:\n",
    "        image (PIL.Image): The original image to augment.\n",
    "        grid (np.ndarray): The original grid data.\n",
    "        perturb_prob (float): Probability of perturbing a cell.\n",
    "        dead_square_prob (float): Probability of marking a cell as dead.\n",
    "        noise_prob (float): Probability of adding noise to a cell.\n",
    "\n",
    "    Returns:\n",
    "        PIL.Image: Augmented image.\n",
    "        list: List of dead squares as (i, j) tuples.\n",
    "    \"\"\"\n",
    "    augmented_grid = grid.copy()\n",
    "    height, width = grid.shape\n",
    "    dead_squares = []\n",
    "\n",
    "    for i in range(height):\n",
    "        for j in range(width):\n",
    "            rand_val = random.random()\n",
    "            if rand_val < perturb_prob:\n",
    "                # Introduce random perturbation\n",
    "                original_value = augmented_grid[i, j]\n",
    "                augmented_grid[i, j] = random.randint(0, augmented_grid.max())\n",
    "                logger.debug(f\"Perturbed cell ({i}, {j}) from {original_value} to {augmented_grid[i, j]}\")\n",
    "\n",
    "            if rand_val < dead_square_prob:\n",
    "                # Mark square as dead\n",
    "                dead_squares.append((i, j))\n",
    "                logger.debug(f\"Marked cell ({i}, {j}) as dead.\")\n",
    "\n",
    "            if rand_val < noise_prob:\n",
    "                # Add random noise by altering the pixel color slightly\n",
    "                pixels = image.load()\n",
    "                current_color = pixels[j, i]\n",
    "                noise = np.random.randint(-30, 31, size=3)\n",
    "                noisy_color = np.clip(np.array(current_color) + noise, 0, 255)\n",
    "                pixels[j, i] = tuple(noisy_color)\n",
    "                logger.debug(f\"Added noise to cell ({i}, {j}): {current_color} -> {pixels[j, i]}\")\n",
    "\n",
    "    # Apply additional transformations\n",
    "    transform = transforms.Compose([\n",
    "        transforms.RandomRotation(15),          # Rotate image by ±15 degrees\n",
    "        transforms.RandomHorizontalFlip(p=0.5), # Flip image horizontally with 50% probability\n",
    "        transforms.RandomVerticalFlip(p=0.5),   # Flip image vertically with 50% probability\n",
    "    ])\n",
    "    augmented_image = grid_to_image(augmented_grid, color_map={\n",
    "        0: [0, 0, 0],        # Black\n",
    "        1: [255, 0, 0],      # Red\n",
    "        2: [0, 255, 0],      # Green\n",
    "        3: [0, 0, 255],      # Blue\n",
    "        4: [255, 255, 0],    # Yellow\n",
    "        5: [255, 165, 0],    # Orange\n",
    "        6: [128, 0, 128],    # Purple\n",
    "        7: [0, 255, 255],    # Cyan\n",
    "        8: [255, 192, 203],  # Pink\n",
    "        9: [128, 128, 128],  # Gray\n",
    "        10: [255, 255, 255], # White\n",
    "        # Add more mappings as needed\n",
    "    })\n",
    "    augmented_image = transform(augmented_image)\n",
    "\n",
    "    return augmented_image, dead_squares\n",
    "\n",
    "\n",
    "class GridDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Custom Dataset for handling grid-based image data.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, grids, transform=None, augmentation=True):\n",
    "        \"\"\"\n",
    "        Initializes the GridDataset.\n",
    "\n",
    "        Args:\n",
    "            grids (list of np.ndarray): List of 2D grid arrays.\n",
    "            transform (callable, optional): Transformations to apply to images. Defaults to None.\n",
    "            augmentation (bool, optional): Whether to apply data augmentation. Defaults to True.\n",
    "        \"\"\"\n",
    "        self.grids = grids\n",
    "        self.transform = transform\n",
    "        self.augmentation = augmentation\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.grids)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        grid = self.grids[idx]\n",
    "        # Generate images\n",
    "        color_image = grid_to_image(grid, color_map={\n",
    "            0: [0, 0, 0],        # Black\n",
    "            1: [255, 0, 0],      # Red\n",
    "            2: [0, 255, 0],      # Green\n",
    "            3: [0, 0, 255],      # Blue\n",
    "            4: [255, 255, 0],    # Yellow\n",
    "            5: [255, 165, 0],    # Orange\n",
    "            6: [128, 0, 128],    # Purple\n",
    "            7: [0, 255, 255],    # Cyan\n",
    "            8: [255, 192, 203],  # Pink\n",
    "            9: [128, 128, 128],  # Gray\n",
    "            10: [255, 255, 255], # White\n",
    "            # Add more mappings as needed\n",
    "        })\n",
    "        grayscale_image = grid_to_grayscale(grid)\n",
    "        numeric_image = grid_to_numeric_image(grid)\n",
    "    \n",
    "        # Apply augmentation\n",
    "        if self.augmentation:\n",
    "            color_image_aug, dead_squares = augment_image_with_transforms(color_image, grid)\n",
    "            grayscale_image_aug, _ = augment_image_with_transforms(grayscale_image.convert('RGB'), grid)\n",
    "            numeric_image_aug, _ = augment_image_with_transforms(numeric_image, grid)\n",
    "        else:\n",
    "            color_image_aug = color_image\n",
    "            grayscale_image_aug = grayscale_image\n",
    "            numeric_image_aug = numeric_image\n",
    "    \n",
    "        # Apply transformations\n",
    "        if self.transform:\n",
    "            color_image_aug = self.transform(color_image_aug)\n",
    "            grayscale_image_aug = self.transform(grayscale_image_aug)\n",
    "            numeric_image_aug = self.transform(numeric_image_aug)\n",
    "    \n",
    "        return {\n",
    "            'color_image': color_image_aug,\n",
    "            'grayscale_image': grayscale_image_aug,\n",
    "            'numeric_image': numeric_image_aug,\n",
    "            'grid': torch.tensor(grid, dtype=torch.long)\n",
    "        }\n",
    "\n",
    "\n",
    "def generate_grids(num_grids, grid_size, num_classes):\n",
    "    \"\"\"\n",
    "    Generates random grids for training.\n",
    "\n",
    "    Args:\n",
    "        num_grids (int): Number of grids to generate.\n",
    "        grid_size (int): Size of each grid (grid_size x grid_size).\n",
    "        num_classes (int): Number of classes/colors.\n",
    "\n",
    "    Returns:\n",
    "        list of np.ndarray: Generated grids.\n",
    "    \"\"\"\n",
    "    grids = []\n",
    "    for _ in range(num_grids):\n",
    "        grid = np.random.randint(0, num_classes, size=(grid_size, grid_size))\n",
    "        grids.append(grid)\n",
    "    logger.info(f\"Generated {num_grids} grids of size {grid_size}x{grid_size}.\")\n",
    "    return grids\n",
    "\n",
    "\n",
    "def get_data_loaders(batch_size=32, grid_size=10, num_classes=11, augment=True):\n",
    "    \"\"\"\n",
    "    Creates DataLoader instances for training and evaluation.\n",
    "\n",
    "    Args:\n",
    "        batch_size (int, optional): Number of samples per batch. Defaults to 32.\n",
    "        grid_size (int, optional): Size of each grid. Defaults to 10.\n",
    "        num_classes (int, optional): Number of classes/colors. Defaults to 11.\n",
    "        augment (bool, optional): Whether to apply data augmentation. Defaults to True.\n",
    "\n",
    "    Returns:\n",
    "        DataLoader: Training DataLoader.\n",
    "        DataLoader: Evaluation DataLoader.\n",
    "    \"\"\"\n",
    "    # Generate grids\n",
    "    train_grids = generate_grids(num_grids=1000, grid_size=grid_size, num_classes=num_classes)\n",
    "    eval_grids = generate_grids(num_grids=200, grid_size=grid_size, num_classes=num_classes)\n",
    "\n",
    "    # Define transformations\n",
    "    transform = transforms.Compose([\n",
    "        transforms.Resize((256, 256)),\n",
    "        transforms.ToTensor(),\n",
    "    ])\n",
    "\n",
    "    # Create datasets\n",
    "    train_dataset = GridDataset(train_grids, transform=transform, augmentation=augment)\n",
    "    eval_dataset = GridDataset(eval_grids, transform=transform, augmentation=False)\n",
    "\n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n",
    "    eval_loader = DataLoader(eval_dataset, batch_size=batch_size, shuffle=False, num_workers=4)\n",
    "\n",
    "    logger.info(\"Created training and evaluation DataLoaders.\")\n",
    "    return train_loader, eval_loader\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
